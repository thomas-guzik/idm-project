/*
 * generated by Xtext 2.23.0
 */
package idm.tests

import com.google.inject.Inject
import idm.compiler.python.PythonCompiler
import idm.qsv.QuerySeparatedValues
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

@ExtendWith(InjectionExtension)
@InjectWith(QsvInjectorProvider)
class QsvPythonCompilerTests {
	@Inject
	ParseHelper<QuerySeparatedValues> parseHelper

	def void assertASTNotNullAndNoErrors(QuerySeparatedValues qsv) {
		Assertions.assertNotNull(qsv)
		val errors = qsv.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}

	def void assertPythonCompilesAndRuns(QuerySeparatedValues qsv, String expectedStdOut) {
		val PythonCompiler cmpPython = new PythonCompiler(qsv)
		val outputResult = cmpPython.compileAndRun
		Assertions.assertEquals(expectedStdOut, outputResult.getOutput)
		Assertions.assertEquals("", outputResult.getError)
	}

	@Test
	def void printWithHeader() {
		val parseTree = parseHelper.parse('''
			using "foo1.csv" with column names: yes
			print
		''')
		val expectedResult = '''
			   f1  f2  f3
			0  v1  v2  v3
		'''
		assertASTNotNullAndNoErrors(parseTree)
		assertPythonCompilesAndRuns(parseTree, expectedResult)
	}

	@Test
	def void printWithoutHeader() {
		val parseTree = parseHelper.parse('''
			using "foo1.csv" with column names: no
			print
		''')
		val expectedResult = '''
			    0   1   2
			0  f1  f2  f3
			1  v1  v2  v3
		'''
		assertASTNotNullAndNoErrors(parseTree)
		assertPythonCompilesAndRuns(parseTree, expectedResult)

	}

	@Test
	def void printAllLinesAndColumns() {
		val parseTree = parseHelper.parse('''
			using "foo2.csv" with column names: yes
			print
				:lines
				:columns
		''')
		val expectedResult = '''
			   f1  f2  f3
			0  v1  v2  v3
			1  v1  v7  v3
		'''
		assertASTNotNullAndNoErrors(parseTree)
		assertPythonCompilesAndRuns(parseTree, expectedResult)

	}

	@Test
	def void printAllColumnsAndLines() {
		val parseTree = parseHelper.parse('''
			using "foo2.csv" with column names: yes
			print
				:columns
				:lines
		''')
		val expectedResult = '''
			   f1  f2  f3
			0  v1  v2  v3
			1  v1  v7  v3
		'''
		assertASTNotNullAndNoErrors(parseTree)
		assertPythonCompilesAndRuns(parseTree, expectedResult)
	}

	@Test
	def void printColumnsWithSingleSelection() {
		val parseTree = parseHelper.parse('''
			using "foo2.csv" with column names: yes
			print
				:columns f2
		''')
		val expectedResult = '''
			   f2
			0  v2
			1  v7
		'''
		assertASTNotNullAndNoErrors(parseTree)
		assertPythonCompilesAndRuns(parseTree, expectedResult)
	}

	@Test
	def void printColumnsWithSingleSelectionAllLines() {
		val parseTree = parseHelper.parse('''
			using "foo2.csv" with column names: yes
			print
				:columns f2
				:lines
		''')
		val expectedResult = '''
			   f2
			0  v2
			1  v7
		'''
		assertASTNotNullAndNoErrors(parseTree)
		assertPythonCompilesAndRuns(parseTree, expectedResult)
	}

	@Test
	def void printColumnsWithMultipleSelectionKeepsOrder() {
		val parseTree = parseHelper.parse('''
			using "foo2.csv" with column names: yes
			print
				:columns f3, f1
		''')
		val expectedResult = '''
			   f3  f1
			0  v3  v1
			1  v3  v1
		'''
		assertASTNotNullAndNoErrors(parseTree)
		assertPythonCompilesAndRuns(parseTree, expectedResult)
	}

	@Test
	def void printLinesWhereColumnsEqualsInt() {
		val parseTree = parseHelper.parse('''
			using "foo_numbers.csv" with column names: yes
			print
				:lines col0 = 1
		''')
		val expectedResult = '''
			   col0  col1
			2     1     3
			5     1    10
		'''
		assertASTNotNullAndNoErrors(parseTree)
		assertPythonCompilesAndRuns(parseTree, expectedResult)
	}

	@Test
	def void printLinesWhereColumnsIntegerComparison() {
		// CompareEqual
		val parseTreeEqual = parseHelper.parse('''
			using "foo_numbers.csv" with column names: yes
			print
				:lines col0 = 2
		''')
		val expectedResultEqual = '''
			   col0  col1
			1     2     7
		'''
		assertASTNotNullAndNoErrors(parseTreeEqual)
		assertPythonCompilesAndRuns(parseTreeEqual, expectedResultEqual)

		// CompareNotEqual
		val parseTreeNotEqual = parseHelper.parse('''
			using "foo_numbers.csv" with column names: yes
			print
				:lines col0 != 5
		''')
		val expectedResultNotEqual = '''
			   col0  col1
			0     4     3
			1     2     7
			2     1     3
			3     3     5
			5     1    10
		'''
		assertASTNotNullAndNoErrors(parseTreeNotEqual)
		assertPythonCompilesAndRuns(parseTreeNotEqual, expectedResultNotEqual)

		// CompareLower
		val parseTreeLower = parseHelper.parse('''
			using "foo_numbers.csv" with column names: yes
			print
				:lines col0 < 4
		''')
		val expectedResultLower = '''
			   col0  col1
			1     2     7
			2     1     3
			3     3     5
			5     1    10
		'''
		assertASTNotNullAndNoErrors(parseTreeLower)
		assertPythonCompilesAndRuns(parseTreeLower, expectedResultLower)

		// CompareGreater
		val parseTreeGreater = parseHelper.parse('''
			using "foo_numbers.csv" with column names: yes
			print
				:lines col1 > 3
		''')
		val expectedResultGreater = '''
			   col0  col1
			1     2     7
			3     3     5
			5     1    10
		'''
		assertASTNotNullAndNoErrors(parseTreeGreater)
		assertPythonCompilesAndRuns(parseTreeGreater, expectedResultGreater)

		// CompareLowerOrEqual
		val parseTreeLowerOrEqual = parseHelper.parse('''
			using "foo_numbers.csv" with column names: yes
			print
				:lines col0 <= 3
		''')
		val expectedResultLowerOrEqual = '''
			   col0  col1
			1     2     7
			2     1     3
			3     3     5
			5     1    10
		'''
		assertASTNotNullAndNoErrors(parseTreeLowerOrEqual)
		assertPythonCompilesAndRuns(parseTreeLowerOrEqual, expectedResultLowerOrEqual)

		// CompareGreaterOrEqual
		val parseTreeGreaterOrEqual = parseHelper.parse('''
			using "foo_numbers.csv" with column names: yes
			print
				:lines col1 >= 5
		''')
		val expectedResultGreaterOrEqual = '''
			   col0  col1
			1     2     7
			3     3     5
			5     1    10
		'''
		assertASTNotNullAndNoErrors(parseTreeGreaterOrEqual)
		assertPythonCompilesAndRuns(parseTreeGreaterOrEqual, expectedResultGreaterOrEqual)
	}
}
