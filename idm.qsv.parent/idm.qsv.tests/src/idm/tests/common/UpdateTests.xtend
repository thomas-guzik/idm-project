/*
 * generated by Xtext 2.23.0
 */
package idm.tests.common

import com.google.inject.Inject
import idm.compiler.bash.QsvBashCompiler
import idm.compiler.python.PythonCompiler
import idm.interpreter.QsvXtendInterpreter
import idm.qsv.QuerySeparatedValues
import idm.tests.QsvInjectorProvider
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.eclipse.xtext.testing.validation.ValidationTestHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

@ExtendWith(InjectionExtension)
@InjectWith(QsvInjectorProvider)
class UpdateTests {
	@Inject
	ParseHelper<QuerySeparatedValues> parseHelper
	@Inject extension ValidationTestHelper

	def void assertEqualResultBashPythonInterpreter(QuerySeparatedValues qsv, String expectedStdOut) {
		val errors = qsv.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')

		val pythonResult = pythonRun(qsv)
		val bashResult = bashRun(qsv)
		val interpreterResult = interpreterRun(qsv)
		Assertions.assertEquals(pythonResult, bashResult, "Expected python, got bash")
		Assertions.assertEquals(bashResult, interpreterResult, "Expected bash, got interpreter")
	}

	def String pythonRun(QuerySeparatedValues qsv) {
		val PythonCompiler cmpPython = new PythonCompiler(qsv)
		val outputResult = cmpPython.compileAndRun
		return outputResult.getOutput.trim
	}

	def String bashRun(QuerySeparatedValues qsv) {
		val QsvBashCompiler cmpBash = new QsvBashCompiler(qsv)
		val code = cmpBash.compile()
		val execution = cmpBash.run(code)
		return execution.output.trim
	}

	def String interpreterRun(QuerySeparatedValues qsv) {
		val QsvXtendInterpreter interpreter = new QsvXtendInterpreter(qsv)
		val outputResult = interpreter.interpret
		return outputResult.getOutput.trim
	}

	@Test
	def void updateOneColumn() {
		val result = parseHelper.parse('''
			using "foo1.csv" with column names: no
			update :set "w" :columns #1
			print
		''')
		val expectedResult = '''
				0	1	2
			0	f1	w	f3
			1	v1	w	v3
		'''
		assertEqualResultBashPythonInterpreter(result, expectedResult)

	}

	@Test
	def void updateOneColumnWithCondition() {
		val result = parseHelper.parse('''
			using "foo1.csv" with column names: no
			update :set "w" :columns #1 :condition #1 = "f2"
			print
		''')
		val expectedResult = '''
				0	1	2
			0	f1	w	f3
			1	v1	v2	v3
		'''
		assertEqualResultBashPythonInterpreter(result, expectedResult)

	}

	@Test
	def void updateWholeColumnString() {
		val parseTree = parseHelper.parse('''
			using "foo2.csv" with column names: yes
			update
				:set "v8"
				:columns f2
			print
		''')
		parseTree.assertNoErrors

		val expectedResult = '''
				f1	f2	f3
			0	v1	v8	v3
			1	v1	v8	v3
		'''
		assertEqualResultBashPythonInterpreter(parseTree, expectedResult)
	}

	def void updateWholeColumnInt() {
		val parseTree = parseHelper.parse('''
			using "foo_numbers.csv" with column names: yes
			update
				:set 5
				:columns col0
			print
		''')
		parseTree.assertNoErrors

		val expectedResult = '''
			   col0  col1
			0     5     3
			1     5     7
			2     5     3
			3     5     5
			4     5     1
			5     5    10
			6     5     1
		'''
		assertEqualResultBashPythonInterpreter(parseTree, expectedResult)
	}

	@Test
	def void updateWholeTwoColumnsString() {
		val parseTree = parseHelper.parse('''
			using "foo2.csv" with column names: yes
			update
				:set "v8"
				:columns f2, f1
			print
		''')
		parseTree.assertNoErrors

		val expectedResult = '''
				f1	f2	f3
			0	v8	v8	v3
			1	v8	v8	v3
		'''
		assertEqualResultBashPythonInterpreter(parseTree, expectedResult)
	}

	@Test
	def void updateStringWhereCondition() {
		val parseTree = parseHelper.parse('''
			using "foo2.csv" with column names: yes
			update
				:set "v9"
				:columns f3
				:condition f2 = "v7"
			print
		''')
		parseTree.assertNoErrors

		val expectedResult = '''
				f1	f2	f3
			0	v1	v2	v3
			1	v1	v7	v9
		'''
		assertEqualResultBashPythonInterpreter(parseTree, expectedResult)
	}

	@Test
	def void updateStringWhereConditionNoHeaders() {
		val parseTree = parseHelper.parse('''
			using "foo2.csv" with column names: no
			update
				:set "v6"
				:columns #2
				:condition #0 = "v1"
			print
		''')
		parseTree.assertNoErrors

		val expectedResult = '''
				0	1	2
			0	f1	f2	f3
			1	v1	v2	v6
			2	v1	v7	v6
		'''
		assertEqualResultBashPythonInterpreter(parseTree, expectedResult)
	}

}
