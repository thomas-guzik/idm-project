/*
 * generated by Xtext 2.23.0
 */
package idm.tests.common

import com.google.inject.Inject
import idm.compiler.bash.QsvBashCompiler
import idm.compiler.python.PythonCompiler
import idm.interpreter.QsvXtendInterpreter
import idm.qsv.QuerySeparatedValues
import idm.tests.QsvInjectorProvider
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.eclipse.xtext.testing.validation.ValidationTestHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

@ExtendWith(InjectionExtension)
@InjectWith(QsvInjectorProvider)
class FunctionalTests {
	@Inject
	ParseHelper<QuerySeparatedValues> parseHelper
	@Inject extension ValidationTestHelper

	def void assertEqualResultBashPythonInterpreter(QuerySeparatedValues qsv, String expectedStdOut) {
		val errors = qsv.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')

		val pythonResult = pythonRun(qsv)
		val bashResult = bashRun(qsv)
		val interpreterResult = interpreterRun(qsv)
		Assertions.assertEquals(pythonResult, bashResult, "Expected python, got bash")
		Assertions.assertEquals(bashResult, interpreterResult, "Expected bash, got interpreter")
	}

	def String pythonRun(QuerySeparatedValues qsv) {
		val PythonCompiler cmpPython = new PythonCompiler(qsv)
		val outputResult = cmpPython.compileAndRun
		return outputResult.getOutput.trim
	}

	def String bashRun(QuerySeparatedValues qsv) {
		val QsvBashCompiler cmpBash = new QsvBashCompiler(qsv)
		val code = cmpBash.compile()
		val execution = cmpBash.run(code)
		return execution.output.trim
	}

	def String interpreterRun(QuerySeparatedValues qsv) {
		val QsvXtendInterpreter interpreter = new QsvXtendInterpreter(qsv)
		val outputResult = interpreter.interpret
		return outputResult.getOutput.trim
	}

	@Test
	def void sumValuesInColumnAndConditionEqual() {
		val parseTree = parseHelper.parse('''
			using "test_variable.csv" with column names: yes
			compute $dix
				:sumValuesInColumn a
			print :lines b = $dix
		''')
		val expectedResult = '''
				a	b	c	d
			0	1	10	v	vvvv
			2	3	10	v	w
		'''
		assertEqualResultBashPythonInterpreter(parseTree, expectedResult)

	}

	@Test
	def void sumValuesInColumnAndConditionNonEqua() {
		val parseTree = parseHelper.parse('''
			using "test_variable.csv" with column names: yes
			compute $dix
				:sumValuesInColumn a
			print :lines b != $dix
		''')
		val expectedResult = '''
				a	b	c	d
			1	2	9	v	10
			3	4	11	v	0
		'''
		assertEqualResultBashPythonInterpreter(parseTree, expectedResult)

	}

	@Test
	def void sumValuesInColumnAndConditionGreater() {
		val parseTree = parseHelper.parse('''
			using "test_variable.csv" with column names: yes
			compute $dix
				:sumValuesInColumn a
			print :lines b > $dix
		''')
		val expectedResult = '''
				a	b	c	d
			3	4	11	v	0
		'''
		assertEqualResultBashPythonInterpreter(parseTree, expectedResult)

	}

	@Test
	def void sumValuesInColumnAndConditionLess() {
		val parseTree = parseHelper.parse('''
			using "test_variable.csv" with column names: yes
			compute $dix
				:sumValuesInColumn a
			print :lines b < $dix
		''')
		val expectedResult = '''
				a	b	c	d
			1	2	9	v	10
		'''
		assertEqualResultBashPythonInterpreter(parseTree, expectedResult)

	}

	@Test
	def void sumValuesInColumnAndConditionGreaterEqual() {
		val parseTree = parseHelper.parse('''
			using "test_variable.csv" with column names: yes
			compute $dix
				:sumValuesInColumn a
			print :lines b >= $dix
		''')
		val expectedResult = '''
				a	b	c	d
			0	1	10	v	vvvv
			2	3	10	v	w
			3	4	11	v	0
		'''
		assertEqualResultBashPythonInterpreter(parseTree, expectedResult)

	}

	@Test
	def void sumValuesInColumnAndConditonLessEqual() {
		val parseTree = parseHelper.parse('''
			using "test_variable.csv" with column names: yes
			compute $dix
				:sumValuesInColumn a
			print :lines b <= $dix
		''')
		val expectedResult = '''
				a	b	c	d
			0	1	10	v	vvvv
			1	2	9	v	10
			2	3	10	v	w
		'''
		assertEqualResultBashPythonInterpreter(parseTree, expectedResult)

	}

	@Test
	def void sumValuesInColumnAndConditonEqualString() {
		val parseTree = parseHelper.parse('''
			using "test_variable.csv" with column names: yes
			compute $v
				:sumValuesInColumn c
			print :lines d = $v
		''')
		val expectedResult = '''
				a	b	c	d
			0	1	10	v	vvvv
		'''
		assertEqualResultBashPythonInterpreter(parseTree, expectedResult)

	}

	@Test
	def void sumValuesInColumnAndConditonNotEqualString() {
		val parseTree = parseHelper.parse('''
			using "test_variable.csv" with column names: yes
			compute $v
				:sumValuesInColumn c
			print :lines d != $v
		''')
		val expectedResult = '''
				a	b	c	d
			1	2	9	v	10
			2	3	10	v	w
			3	4	11	v	0
		'''
		assertEqualResultBashPythonInterpreter(parseTree, expectedResult)

	}

	@Test
	def void sumValuesInColumnAndDeleteConditionEqual() {
		val parseTree = parseHelper.parse('''
			using "test_variable.csv" with column names: yes
			compute $dix
				:sumValuesInColumn a
			delete :lines b = $dix
			print
		''')
		val expectedResult = '''
				a	b	c	d
			0	2	9	v	10
			1	4	11	v	0
		'''
		assertEqualResultBashPythonInterpreter(parseTree, expectedResult)

	}

	@Test
	def void sumValuesInColumnAndUpdateConditionEqual() {
		val parseTree = parseHelper.parse('''
			using "test_variable.csv" with column names: yes
			compute $dix
				:sumValuesInColumn a
			update :set $dix :columns a
			print
		''')
		val expectedResult = '''
				a	b	c	d
			0	10	10	v	vvvv
			1	10	9	v	10
			2	10	10	v	w
			3	10	11	v	0
		'''
		assertEqualResultBashPythonInterpreter(parseTree, expectedResult)

	}

	@Test
	def void sumValuesInColumnAndInsertLine() {
		val parseTree = parseHelper.parse('''
			using "test_variable.csv" with column names: yes
			compute $dix
				:sumValuesInColumn a
			insert :lines ($dix,$dix,$dix,$dix)
			print
		''')
		val expectedResult = '''
				a	b	c	d
			0	1	10	v	vvvv
			1	2	9	v	10
			2	3	10	v	w
			3	4	11	v	0
			4	10	10	10	10
		'''
		assertEqualResultBashPythonInterpreter(parseTree, expectedResult)

	}

	@Test
	def void sumValuesInColumnAndInsertColumns() {
		val parseTree = parseHelper.parse('''
			using "test_variable.csv" with column names: yes
			compute $dix
				:sumValuesInColumn a
			insert :columns e ($dix,$dix,$dix,$dix)
			print
		''')
		val expectedResult = '''
				a	b	c	d	e
			0	1	10	v	vvvv	10
			1	2	9	v	10	10
			2	3	10	v	w	10
			3	4	11	v	0	10
		'''
		assertEqualResultBashPythonInterpreter(parseTree, expectedResult)

	}

	@Test
	def void sumColumnsAndInsertColumnsFromVar() {
		val parseTree = parseHelper.parse('''
			using "test_variable.csv" with column names: yes
			compute $col
				:sumColumns a
			insert :columns e $col
			print
		''')
		val expectedResult = '''
				a	b	c	d	e
			0	1	10	v	vvvv	1
			1	2	9	v	10	2
			2	3	10	v	w	3
			3	4	11	v	0	4
		'''
		assertEqualResultBashPythonInterpreter(parseTree, expectedResult)

	}

	@Test
	def void sumLinesThenUpdateAndPrint() {
		val parseTree = parseHelper.parse('''
			using "foo_numbers.csv" with column names: yes
			compute $sumCol0
				:sumValuesInColumn col0
			update
				:set $sumCol0
				:columns col0
				:condition col0 = 1
			print
				:columns col1
				:lines col0 = $sumCol0
		''')
		parseTree.assertNoErrors

		val expectedResult = '''
				col1
			2	3
			5	10
		'''
		assertEqualResultBashPythonInterpreter(parseTree, expectedResult)
	}

	@Test
	def void sumTwoColumnsThenInsert() {
		val parseTree = parseHelper.parse('''
			using "foo_numbers.csv" with column names: yes
			compute $sumCol0Col1
				:sumColumns col0, col1
			insert
				:columns newcol $sumCol0Col1
			print
		''')
		parseTree.assertNoErrors

		val expectedResult = '''
				col0	col1	newcol
			0	4	3	7
			1	2	7	9
			2	1	3	4
			3	3	5	8
			4	5	1	6
			5	1	10	11
			6	5	1	6
		'''
		assertEqualResultBashPythonInterpreter(parseTree, expectedResult)
	}

	@Test
	def void deleteThenInsertColumnNoHeaderDoesNotRenumber() {
		val parseTree = parseHelper.parse('''
			using "foo2.csv" with column names: no
			delete
				:columns #2
			insert
				:columns ("f5", "v8", "v1")
			print
		''')
		parseTree.assertNoErrors

		val expectedResult = '''
				0	1	3
			0	f1	f2	f5
			1	v1	v2	v8
			2	v1	v7	v1
		'''

		assertEqualResultBashPythonInterpreter(parseTree, expectedResult)
	}

	@Test
	def void deleteThenInsertColumnNoHeaderDoesNotRenumber2() {
		val parseTree = parseHelper.parse('''
			using "foo_6cols.csv" with column names: no
			delete
				:columns #0, #2, #4, #5
			insert
				:columns ("f1", "v2", "v3"), ("f4", "v5", "v6"),
				("f7", "v8", "v9"), ("f9", "v8", "v7"), ("f6", "v5", "v4")
			print
		''')
		parseTree.assertNoErrors

		val expectedResult = '''
				1	3	6	7	8	9	10
			0	f2	f4	f1	f4	f7	f9	f6
			1	v2	v5	v2	v5	v8	v8	v5
			2	v7	v4	v3	v6	v9	v7	v4
		'''

		assertEqualResultBashPythonInterpreter(parseTree, expectedResult)
	}

}
