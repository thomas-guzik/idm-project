/*
 * generated by Xtext 2.23.0
 */
package idm.tests.compiler.python

import com.google.inject.Inject
import idm.compiler.python.PythonCompiler
import idm.compiler.python.PythonCompilerOutput
import idm.qsv.QuerySeparatedValues
import idm.tests.QsvInjectorProvider
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.eclipse.xtext.testing.validation.ValidationTestHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

@ExtendWith(InjectionExtension)
@InjectWith(QsvInjectorProvider)
class PrintOnlyTests {
	@Inject
	ParseHelper<QuerySeparatedValues> parseHelper
	@Inject extension ValidationTestHelper

	def void assertPythonCompilesAndRuns(QuerySeparatedValues qsv, String expectedStdOut) {
		val outputResult = pythonCompileAndRun(qsv)
		Assertions.assertEquals(expectedStdOut, outputResult.getOutput)
		Assertions.assertEquals("", outputResult.getError)
	}

	def PythonCompilerOutput pythonCompileAndRun(QuerySeparatedValues qsv) {
		val PythonCompiler cmpPython = new PythonCompiler(qsv)
		val outputResult = cmpPython.compileAndRun
		return outputResult
	}

	@Test
	def void printWithHeader() {
		val parseTree = parseHelper.parse('''
			using "foo1.csv" with column names: yes
			print
		''')
		parseTree.assertNoErrors
		val expectedResult = '''
			   f1  f2  f3
			0  v1  v2  v3
		'''
		assertPythonCompilesAndRuns(parseTree, expectedResult)
	}

	@Test
	def void printWithoutHeader() {
		val parseTree = parseHelper.parse('''
			using "foo1.csv" with column names: no
			print
		''')
		parseTree.assertNoErrors

		val expectedResult = '''
			    0   1   2
			0  f1  f2  f3
			1  v1  v2  v3
		'''
		assertPythonCompilesAndRuns(parseTree, expectedResult)

	}

	@Test
	def void printAllLinesAndColumns() {
		val parseTree = parseHelper.parse('''
			using "foo2.csv" with column names: yes
			print
				:lines
				:columns
		''')
		parseTree.assertNoErrors
		val expectedResult = '''
			   f1  f2  f3
			0  v1  v2  v3
			1  v1  v7  v3
		'''
		assertPythonCompilesAndRuns(parseTree, expectedResult)

	}

	@Test
	def void printAllColumnsAndLines() {
		val parseTree = parseHelper.parse('''
			using "foo2.csv" with column names: yes
			print
				:columns
				:lines
		''')
		parseTree.assertNoErrors

		val expectedResult = '''
			   f1  f2  f3
			0  v1  v2  v3
			1  v1  v7  v3
		'''
		assertPythonCompilesAndRuns(parseTree, expectedResult)
	}

	@Test
	def void printColumnsWithSingleNameSelection() {
		val parseTree = parseHelper.parse('''
			using "foo2.csv" with column names: yes
			print
				:columns f2
		''')
		parseTree.assertNoErrors

		val expectedResult = '''
			   f2
			0  v2
			1  v7
		'''
		assertPythonCompilesAndRuns(parseTree, expectedResult)
	}

	@Test
	def void printColumnsWithSingleNumberSelection() {
		val parseTree = parseHelper.parse('''
			using "foo2.csv" with column names: no
			print
				:columns #1
		''')
		parseTree.assertNoErrors

		val expectedResult = '''
			    1
			0  f2
			1  v2
			2  v7
		'''
		assertPythonCompilesAndRuns(parseTree, expectedResult)
	}

	@Test
	def void printColumnsWithSingleSelectionAllLines() {
		val parseTree = parseHelper.parse('''
			using "foo2.csv" with column names: yes
			print
				:columns f2
				:lines
		''')
		parseTree.assertNoErrors

		val expectedResult = '''
			   f2
			0  v2
			1  v7
		'''
		assertPythonCompilesAndRuns(parseTree, expectedResult)
	}

	@Test
	def void printColumnsWithMultipleNameSelectionKeepsOrder() {
		val parseTree = parseHelper.parse('''
			using "foo2.csv" with column names: yes
			print
				:columns f3, f1
		''')
		parseTree.assertNoErrors

		val expectedResult = '''
			   f3  f1
			0  v3  v1
			1  v3  v1
		'''
		assertPythonCompilesAndRuns(parseTree, expectedResult)
	}

	@Test
	def void printColumnsWithMultipleNumberSelectionKeepsOrder() {
		val parseTree = parseHelper.parse('''
			using "foo2.csv" with column names: no
			print
				:columns #2, #0
		''')
		parseTree.assertNoErrors

		val expectedResult = '''
			    2   0
			0  f3  f1
			1  v3  v1
			2  v3  v1
		'''
		assertPythonCompilesAndRuns(parseTree, expectedResult)
	}

	@Test
	def void printLinesWhereColumnsEqualInt() {
		val parseTree = parseHelper.parse('''
			using "foo_numbers.csv" with column names: yes
			print
				:lines col0 = 1
		''')
		parseTree.assertNoErrors

		val expectedResult = '''
			   col0  col1
			2     1     3
			5     1    10
		'''
		assertPythonCompilesAndRuns(parseTree, expectedResult)
	}

	@Test
	def void printTwice() {
		val parseTree = parseHelper.parse('''
			using "foo_numbers.csv" with column names: yes
			print
				:lines col0 = 1
			print
		''')
		parseTree.assertNoErrors

		val expectedResult = '''
			   col0  col1
			2     1     3
			5     1    10
			   col0  col1
			0     4     3
			1     2     7
			2     1     3
			3     3     5
			4     5     1
			5     1    10
			6     5     1
		'''
		assertPythonCompilesAndRuns(parseTree, expectedResult)
	}

	@Test
	def void printLinesWhereColumnsEqualIntNoHeaders() {
		val parseTree = parseHelper.parse('''
			using "foo_numbers_noheaders.csv" with column names: no
			print
				:lines #0 = 5
		''')
		parseTree.assertNoErrors

		val expectedResult = '''
			   0  1
			4  5  1
			6  5  1
		'''
		assertPythonCompilesAndRuns(parseTree, expectedResult)
	}

	@Test
	def void printLinesWhereColumnsEqualString() {
		val parseTree = parseHelper.parse('''
			using "foo2.csv" with column names: yes
			print
				:lines f2 = "v7"
		''')
		parseTree.assertNoErrors

		val expectedResult = '''
			   f1  f2  f3
			1  v1  v7  v3
		'''
		assertPythonCompilesAndRuns(parseTree, expectedResult)
	}

	@Test
	def void printLinesWhereColumnsIntegerComparison() {
		// CompareEqual
		val parseTreeEqual = parseHelper.parse('''
			using "foo_numbers.csv" with column names: yes
			print
				:lines col0 = 2
		''')
		parseTreeEqual.assertNoErrors

		val expectedResultEqual = '''
			   col0  col1
			1     2     7
		'''
		assertPythonCompilesAndRuns(parseTreeEqual, expectedResultEqual)

		// CompareNotEqual
		val parseTreeNotEqual = parseHelper.parse('''
			using "foo_numbers.csv" with column names: yes
			print
				:lines col0 != 5
		''')
		parseTreeNotEqual.assertNoErrors

		val expectedResultNotEqual = '''
			   col0  col1
			0     4     3
			1     2     7
			2     1     3
			3     3     5
			5     1    10
		'''
		assertPythonCompilesAndRuns(parseTreeNotEqual, expectedResultNotEqual)

		// CompareLower
		val parseTreeLower = parseHelper.parse('''
			using "foo_numbers.csv" with column names: yes
			print
				:lines col0 < 4
		''')
		parseTreeLower.assertNoErrors

		val expectedResultLower = '''
			   col0  col1
			1     2     7
			2     1     3
			3     3     5
			5     1    10
		'''
		assertPythonCompilesAndRuns(parseTreeLower, expectedResultLower)

		// CompareGreater
		val parseTreeGreater = parseHelper.parse('''
			using "foo_numbers.csv" with column names: yes
			print
				:lines col1 > 3
		''')
		parseTreeGreater.assertNoErrors

		val expectedResultGreater = '''
			   col0  col1
			1     2     7
			3     3     5
			5     1    10
		'''
		assertPythonCompilesAndRuns(parseTreeGreater, expectedResultGreater)

		// CompareLowerOrEqual
		val parseTreeLowerOrEqual = parseHelper.parse('''
			using "foo_numbers.csv" with column names: yes
			print
				:lines col0 <= 3
		''')
		parseTreeLowerOrEqual.assertNoErrors

		val expectedResultLowerOrEqual = '''
			   col0  col1
			1     2     7
			2     1     3
			3     3     5
			5     1    10
		'''
		assertPythonCompilesAndRuns(parseTreeLowerOrEqual, expectedResultLowerOrEqual)

		// CompareGreaterOrEqual
		val parseTreeGreaterOrEqual = parseHelper.parse('''
			using "foo_numbers.csv" with column names: yes
			print
				:lines col1 >= 5
		''')
		parseTreeGreaterOrEqual.assertNoErrors

		val expectedResultGreaterOrEqual = '''
			   col0  col1
			1     2     7
			3     3     5
			5     1    10
		'''
		assertPythonCompilesAndRuns(parseTreeGreaterOrEqual, expectedResultGreaterOrEqual)
	}

	@Test
	def void printEmptyData() {
		val parseTree = parseHelper.parse('''
			using "foo_numbers.csv" with column names: yes
			print
				:lines col0 = -1
		''')
		parseTree.assertNoErrors

		val result = pythonCompileAndRun(parseTree)
		Assertions.assertEquals("", result.output.strip)
		Assertions.assertEquals("", result.getError)

	}

	@Test
	def void printLinesWithOrCondition() {
		val parseTree = parseHelper.parse('''
			using "foo_numbers.csv" with column names: yes
			print
				:lines col0 = 1 or col0 = 3
		''')
		parseTree.assertNoErrors

		val expectedResult = '''
			   col0  col1
			2     1     3
			3     3     5
			5     1    10
		'''
		assertPythonCompilesAndRuns(parseTree, expectedResult)
	}

	@Test
	def void printLinesWithAndCondition() {
		val parseTree = parseHelper.parse('''
			using "foo_numbers.csv" with column names: yes
			print
				:lines col0 > 2 and col0 < 5
		''')
		parseTree.assertNoErrors

		val expectedResult = '''
			   col0  col1
			0     4     3
			3     3     5
		'''
		assertPythonCompilesAndRuns(parseTree, expectedResult)
	}

	@Test
	def void printLinesWithNestedCondition() {
		val parseTree = parseHelper.parse('''
			using "foo_numbers.csv" with column names: yes
			print
				:lines (col0 > 2 and col0 < 5) or col1 = 10
		''')
		parseTree.assertNoErrors

		val expectedResult = '''
			   col0  col1
			0     4     3
			3     3     5
			5     1    10
		'''
		assertPythonCompilesAndRuns(parseTree, expectedResult)
	}

	@Test
	def void printLinesAndColumnWithNestedCondition() {
		val parseTree = parseHelper.parse('''
			using "foo_numbers.csv" with column names: yes
			print
				:columns col1
				:lines (col0 > 2 and col0 < 5) or col1 = 10
		''')
		parseTree.assertNoErrors

		val expectedResult = '''
			   col1
			0     3
			3     5
			5    10
		'''
		assertPythonCompilesAndRuns(parseTree, expectedResult)
	}

	@Test
	def void printLinesWithNestedConditions() {
		val parseTree = parseHelper.parse('''
			using "foo_numbers.csv" with column names: yes
			print
				:lines (col0 <= 3 or col0 = 4) and (col1 != 3 or (col0 < 3 and col0 < 2))
		''')
		parseTree.assertNoErrors

		val expectedResult = '''
			   col0  col1
			1     2     7
			2     1     3
			3     3     5
			5     1    10
		'''
		assertPythonCompilesAndRuns(parseTree, expectedResult)
	}

	@Test
	def void printOneLine() {
		val parseTree = parseHelper.parse('''
			using "foo2.csv" with column names: no
			print
				:lines #1
		''')
		val expectedResult = '''
			    0   1   2
			1  v1  v2  v3
		'''

		assertPythonCompilesAndRuns(parseTree, expectedResult)
	}

	@Test
	def void printOneLineWithTrueCondition() {
		val parseTree = parseHelper.parse('''
			using "foo2.csv" with column names: no
			print
				:lines #1 #0 = "v1"
		''')
		val expectedResult = '''
			    0   1   2
			1  v1  v2  v3
		'''

		assertPythonCompilesAndRuns(parseTree, expectedResult)
	}

	@Test
	def void printOneLineWithFalseCondition() {
		val parseTree = parseHelper.parse('''
			using "foo2.csv" with column names: no
			print
				:lines #1 #2 = 5
		''')
		val result = pythonCompileAndRun(parseTree)
		Assertions.assertEquals("", result.output.strip)
		Assertions.assertEquals("", result.getError)
	}

	@Test
	def void printLineRange() {
		val parseTree = parseHelper.parse('''
			using "foo2.csv" with column names: no
			print
				:lines #1-2
		''')
		val expectedResult = '''
			    0   1   2
			1  v1  v2  v3
			2  v1  v7  v3
		'''

		assertPythonCompilesAndRuns(parseTree, expectedResult)
	}

	@Test
	def void combineLineRangeAndConditionNoHeader() {
		val parseTree = parseHelper.parse('''
			using "foo2.csv" with column names: no
			print
				:lines #1-2 #1 = "v7"
		''')
		val expectedResult = '''
			    0   1   2
			2  v1  v7  v3
		'''

		assertPythonCompilesAndRuns(parseTree, expectedResult)
	}

	@Test
	def void combineLineRangeAndCondition() {
		val parseTree = parseHelper.parse('''
			using "foo_numbers.csv" with column names: yes
			print
				:lines #2-5 col1 > 2
		''')
		val expectedResult = '''
			   col0  col1
			2     1     3
			3     3     5
			5     1    10
		'''

		assertPythonCompilesAndRuns(parseTree, expectedResult)
	}

}
