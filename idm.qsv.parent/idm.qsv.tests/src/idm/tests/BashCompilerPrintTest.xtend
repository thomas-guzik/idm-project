package idm.tests

/*
 * generated by Xtext 2.23.0
 */
import com.google.inject.Inject
import idm.qsv.QuerySeparatedValues
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import idm.tests.QsvInjectorProvider
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.junit.jupiter.api.^extension.ExtendWith
import idm.compiler.bash.CompilerBashQsv

@ExtendWith(InjectionExtension)
@InjectWith(QsvInjectorProvider)
class BashCompilerPrintTest {
	@Inject
	ParseHelper<QuerySeparatedValues> parseHelper

	@Test
	def void printWithoutColumnName() {
		val result = parseHelper.parse('''
			using "foo1.csv" with column names: no
			print
		''')
		val expectedResult = '''
			  0 1 2
			0 f1 f2 f3
			1 v1 v2 v3
		'''
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
		val CompilerBashQsv cmpBash = new CompilerBashQsv(result)
		val code = cmpBash.compile()
		val execution = cmpBash.run(code)
		Assertions.assertEquals(expectedResult, execution.output)
	}

	@Test
	def void printWithColumnName() {
		val result = parseHelper.parse('''
			using "foo1.csv" with column names: yes
			print
		''')
		val expectedResult = '''
			  f1 f2 f3
			0 v1 v2 v3
		'''
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
		println(errors)
		val CompilerBashQsv cmpBash = new CompilerBashQsv(result)
		val code = cmpBash.compile()
		val execution = cmpBash.run(code)
		Assertions.assertEquals(expectedResult, execution.output)
	}

	@Test
	def void printFirstLineWithoutColumnName() {
		val result = parseHelper.parse('''
			using "foo1.csv" with column names: no
			print :lines #0
		''')
		val expectedResult = '''
			  0 1 2
			0 f1 f2 f3
		'''
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
		println(errors)
		val CompilerBashQsv cmpBash = new CompilerBashQsv(result)
		val code = cmpBash.compile()
		val execution = cmpBash.run(code)
		Assertions.assertEquals(expectedResult, execution.output)
	}

	@Test
	def void printFirstLineWithColumnName() {
		val result = parseHelper.parse('''
			using "foo1.csv" with column names: yes
			print :lines #0
		''')
		val expectedResult = '''
			  f1 f2 f3
			0 v1 v2 v3
		'''
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
		println(errors)
		val CompilerBashQsv cmpBash = new CompilerBashQsv(result)
		val code = cmpBash.compile()
		val execution = cmpBash.run(code)
		Assertions.assertEquals(expectedResult, execution.output)
	}

	@Test
	def void selectRangeLine() {
		val result = parseHelper.parse('''
			using "foo2.csv" with column names: no
			print :lines 1-2
		''')
		val expectedResult = '''
			  0 1 2
			1 v1 v2 v3
			2 v1 v7 v3
		'''
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
		println(errors)
		val CompilerBashQsv cmpBash = new CompilerBashQsv(result)
		val code = cmpBash.compile()
		val execution = cmpBash.run(code)
		Assertions.assertEquals(expectedResult, execution.output)
	}

	@Test
	def void selectColumnWithOneNumber() {
		val result = parseHelper.parse('''
			using "foo1.csv" with column names: no
			print :columns #0
		''')
		val expectedResult = '''
			  0
			0 f1
			1 v1
		'''
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
		println(errors)
		val CompilerBashQsv cmpBash = new CompilerBashQsv(result)
		val code = cmpBash.compile()
		val execution = cmpBash.run(code)
		Assertions.assertEquals(expectedResult, execution.output)
	}

	@Test
	def void selectColumnWithMultipleNumber() {
		val result = parseHelper.parse('''
			using "foo1.csv" with column names: no
			print :columns #0,#2
		''')
		val expectedResult = '''
			  0 2
			0 f1 f3
			1 v1 v3
		'''
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
		println(errors)
		val CompilerBashQsv cmpBash = new CompilerBashQsv(result)
		val code = cmpBash.compile()
		val execution = cmpBash.run(code)
		Assertions.assertEquals(expectedResult, execution.output)
	}

	@Test
	def void selectColumnWithOneName() {
		val result = parseHelper.parse('''
			using "foo1.csv" with column names: yes
			print :columns f1
		''')
		val expectedResult = '''
			  f1
			0 v1
		'''
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
		println(errors)
		val CompilerBashQsv cmpBash = new CompilerBashQsv(result)
		val code = cmpBash.compile()
		val execution = cmpBash.run(code)
		println(execution.output)
		Assertions.assertEquals(expectedResult, execution.output)
	}

	@Test
	def void selectColumnWithMultipleName() {
		val result = parseHelper.parse('''
			using "foo1.csv" with column names: yes
			print :columns f1,f3
		''')
		val expectedResult = '''
			  f1 f3
			0 v1 v3
		'''
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
		println(errors)
		val CompilerBashQsv cmpBash = new CompilerBashQsv(result)
		val code = cmpBash.compile()
		println(code)
		val execution = cmpBash.run(code)
		println(execution.output)
		Assertions.assertEquals(expectedResult, execution.output)
	}
/*
 * 	@Test
 * 	def void withHeader() {
 * 		val result = parseHelper.parse('''
 * 			using "foo1.csv" with column names: yes
 * 			print
 * 		''')
 * 		val expectedResult = '''
 * 			   f1  f2  f3
 * 			0  v1  v2  v3
 * 		'''
 * 		Assertions.assertNotNull(result)
 * 		val errors = result.eResource.errors
 * 		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')

 * 		val BashCompiler cmpBash = new BashCompiler(result)
 * 		val outputResult = cmpBash.compileAndRun
 * 		Assertions.assertEquals(expectedResult, outputResult.getOutput)
 * 		Assertions.assertEquals("", outputResult.getError)
 * 	}

 * 	@Test
 * 	def void withoutHeader() {
 * 		val result = parseHelper.parse('''
 * 			using "foo1.csv" with column names: no
 * 			print
 * 		''')
 * 		val expectedResult = '''
 * 			    0   1   2
 * 			0  f1  f2  f3
 * 			1  v1  v2  v3
 * 		'''
 * 		Assertions.assertNotNull(result)
 * 		val errors = result.eResource.errors
 * 		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')

 * 		val BashCompiler cmpBash = new BashCompiler(result)
 * 		val outputResult = cmpBash.compileAndRun
 * 		Assertions.assertEquals(expectedResult, outputResult.getOutput)
 * 		Assertions.assertEquals("", outputResult.getError)
 * 	}

 * 	@Test
 * 	def void printAllLinesAndColumns() {
 * 		val result = parseHelper.parse('''
 * 			using "foo2.csv" with column names: yes
 * 			print
 * 				:lines
 * 				:columns
 * 		''')
 * 		val expectedResult = '''
 * 			   f1  f2  f3
 * 			0  v1  v2  v3
 * 			1  v1  v7  v3
 * 		'''
 * 		Assertions.assertNotNull(result)
 * 		val errors = result.eResource.errors
 * 		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')

 * 		val BashCompiler cmpBash = new BashCompiler(result)
 * 		val outputResult = cmpBash.compileAndRun
 * 		Assertions.assertEquals(expectedResult, outputResult.getOutput)
 * 		Assertions.assertEquals("", outputResult.getError)
 * 	}

 * 	@Test
 * 	def void printAllColumnsAndLines() {
 * 		val result = parseHelper.parse('''
 * 			using "foo2.csv" with column names: yes
 * 			print
 * 				:lines
 * 				:columns
 * 		''')
 * 		val expectedResult = '''
 * 			   f1  f2  f3
 * 			0  v1  v2  v3
 * 			1  v1  v7  v3
 * 		'''
 * 		Assertions.assertNotNull(result)
 * 		val errors = result.eResource.errors
 * 		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')

 * 		val BashCompiler cmpBash = new BashCompiler(result)
 * 		val outputResult = cmpBash.compileAndRun
 * 		Assertions.assertEquals(expectedResult, outputResult.getOutput)
 * 		Assertions.assertEquals("", outputResult.getError)
 * 	}
 */
}
