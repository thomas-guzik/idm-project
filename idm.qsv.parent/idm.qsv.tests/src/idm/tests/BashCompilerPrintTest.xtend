package idm.tests

/*
 * generated by Xtext 2.23.0
 */

import com.google.inject.Inject
import idm.qsv.QuerySeparatedValues
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import idm.tests.QsvInjectorProvider
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.junit.jupiter.api.^extension.ExtendWith
import idm.compiler.bash.CompilerBashQsv

@ExtendWith(InjectionExtension)
@InjectWith(QsvInjectorProvider)
class BashCompilerPrintTest {
	@Inject
	ParseHelper<QuerySeparatedValues> parseHelper

	@Test
	def void generateBasicCode() {
		val result = parseHelper.parse('''
			using "foo1.csv" with column names: no
			print
		''')
		val expectedResult = '''
		#!/bin/bash
		OLD_IFS=$IFS
		IFS=","
		exec < foo1.csv
		n=0
		while read line 
		do
		echo $line 
		  n=$(( $n + 1 )))
		done'''
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')

		val CompilerBashQsv cmpBash = new CompilerBashQsv(result)
		val output = cmpBash.compile()
		println(output)
		Assertions.assertEquals(expectedResult, output)
	}
/*
	@Test
	def void withHeader() {
		val result = parseHelper.parse('''
			using "foo1.csv" with column names: yes
			print
		''')
		val expectedResult = '''
			   f1  f2  f3
			0  v1  v2  v3
		'''
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')

		val BashCompiler cmpBash = new BashCompiler(result)
		val outputResult = cmpBash.compileAndRun
		Assertions.assertEquals(expectedResult, outputResult.getOutput)
		Assertions.assertEquals("", outputResult.getError)
	}

	@Test
	def void withoutHeader() {
		val result = parseHelper.parse('''
			using "foo1.csv" with column names: no
			print
		''')
		val expectedResult = '''
			    0   1   2
			0  f1  f2  f3
			1  v1  v2  v3
		'''
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')

		val BashCompiler cmpBash = new BashCompiler(result)
		val outputResult = cmpBash.compileAndRun
		Assertions.assertEquals(expectedResult, outputResult.getOutput)
		Assertions.assertEquals("", outputResult.getError)
	}

	@Test
	def void printAllLinesAndColumns() {
		val result = parseHelper.parse('''
			using "foo2.csv" with column names: yes
			print
				:lines
				:columns
		''')
		val expectedResult = '''
			   f1  f2  f3
			0  v1  v2  v3
			1  v1  v7  v3
		'''
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')

		val BashCompiler cmpBash = new BashCompiler(result)
		val outputResult = cmpBash.compileAndRun
		Assertions.assertEquals(expectedResult, outputResult.getOutput)
		Assertions.assertEquals("", outputResult.getError)
	}

	@Test
	def void printAllColumnsAndLines() {
		val result = parseHelper.parse('''
			using "foo2.csv" with column names: yes
			print
				:lines
				:columns
		''')
		val expectedResult = '''
			   f1  f2  f3
			0  v1  v2  v3
			1  v1  v7  v3
		'''
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')

		val BashCompiler cmpBash = new BashCompiler(result)
		val outputResult = cmpBash.compileAndRun
		Assertions.assertEquals(expectedResult, outputResult.getOutput)
		Assertions.assertEquals("", outputResult.getError)
	}
	*/
}
