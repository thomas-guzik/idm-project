/*
 * generated by Xtext 2.23.0
 */
package idm.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import idm.ide.contentassist.antlr.internal.InternalQsvParser;
import idm.services.QsvGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class QsvParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(QsvGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, QsvGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getHeaderAccess().getAlternatives_5(), "rule__Header__Alternatives_5");
			builder.put(grammarAccess.getColumnsAccess().getAlternatives_1(), "rule__Columns__Alternatives_1");
			builder.put(grammarAccess.getColumnAccess().getAlternatives(), "rule__Column__Alternatives");
			builder.put(grammarAccess.getLinesAccess().getAlternatives_1(), "rule__Lines__Alternatives_1");
			builder.put(grammarAccess.getHighestPriorityAccess().getAlternatives(), "rule__HighestPriority__Alternatives");
			builder.put(grammarAccess.getBinCondAccess().getAlternatives_2(), "rule__BinCond__Alternatives_2");
			builder.put(grammarAccess.getOpCompAccess().getAlternatives(), "rule__OpComp__Alternatives");
			builder.put(grammarAccess.getValueAccess().getAlternatives(), "rule__Value__Alternatives");
			builder.put(grammarAccess.getBooleanAccess().getAlternatives(), "rule__Boolean__Alternatives");
			builder.put(grammarAccess.getQuerySeparatedValuesAccess().getGroup(), "rule__QuerySeparatedValues__Group__0");
			builder.put(grammarAccess.getHeaderAccess().getGroup(), "rule__Header__Group__0");
			builder.put(grammarAccess.getPrintAccess().getGroup(), "rule__Print__Group__0");
			builder.put(grammarAccess.getSelectorAccess().getGroup(), "rule__Selector__Group__0");
			builder.put(grammarAccess.getColumnsAccess().getGroup(), "rule__Columns__Group__0");
			builder.put(grammarAccess.getColRangeAccess().getGroup(), "rule__ColRange__Group__0");
			builder.put(grammarAccess.getColumnNumberAccess().getGroup(), "rule__ColumnNumber__Group__0");
			builder.put(grammarAccess.getLinesAccess().getGroup(), "rule__Lines__Group__0");
			builder.put(grammarAccess.getLineRangeAccess().getGroup(), "rule__LineRange__Group__0");
			builder.put(grammarAccess.getLineAccess().getGroup(), "rule__Line__Group__0");
			builder.put(grammarAccess.getConditionAccess().getGroup(), "rule__Condition__Group__0");
			builder.put(grammarAccess.getConditionAccess().getGroup_1(), "rule__Condition__Group_1__0");
			builder.put(grammarAccess.getMidPriorityAccess().getGroup(), "rule__MidPriority__Group__0");
			builder.put(grammarAccess.getMidPriorityAccess().getGroup_1(), "rule__MidPriority__Group_1__0");
			builder.put(grammarAccess.getHighestPriorityAccess().getGroup_1(), "rule__HighestPriority__Group_1__0");
			builder.put(grammarAccess.getBinCondAccess().getGroup(), "rule__BinCond__Group__0");
			builder.put(grammarAccess.getQuerySeparatedValuesAccess().getHeaderAssignment_0(), "rule__QuerySeparatedValues__HeaderAssignment_0");
			builder.put(grammarAccess.getQuerySeparatedValuesAccess().getStatementsAssignment_1(), "rule__QuerySeparatedValues__StatementsAssignment_1");
			builder.put(grammarAccess.getHeaderAccess().getNameFileAssignment_1(), "rule__Header__NameFileAssignment_1");
			builder.put(grammarAccess.getHeaderAccess().getHasColumnNameAssignment_5_0(), "rule__Header__HasColumnNameAssignment_5_0");
			builder.put(grammarAccess.getStatementAccess().getStatementAssignment(), "rule__Statement__StatementAssignment");
			builder.put(grammarAccess.getPrintAccess().getSelectorAssignment_1(), "rule__Print__SelectorAssignment_1");
			builder.put(grammarAccess.getSelectorAccess().getColumnsAssignment_0(), "rule__Selector__ColumnsAssignment_0");
			builder.put(grammarAccess.getSelectorAccess().getLinesAssignment_1(), "rule__Selector__LinesAssignment_1");
			builder.put(grammarAccess.getColumnsAccess().getRangeAssignment_1_0(), "rule__Columns__RangeAssignment_1_0");
			builder.put(grammarAccess.getColumnsAccess().getColumnAssignment_1_1(), "rule__Columns__ColumnAssignment_1_1");
			builder.put(grammarAccess.getColRangeAccess().getStartAssignment_0(), "rule__ColRange__StartAssignment_0");
			builder.put(grammarAccess.getColRangeAccess().getEndAssignment_2(), "rule__ColRange__EndAssignment_2");
			builder.put(grammarAccess.getColumnNameAccess().getNamebAssignment(), "rule__ColumnName__NamebAssignment");
			builder.put(grammarAccess.getColumnNumberAccess().getNumberAssignment_1(), "rule__ColumnNumber__NumberAssignment_1");
			builder.put(grammarAccess.getLinesAccess().getRangeAssignment_1_0(), "rule__Lines__RangeAssignment_1_0");
			builder.put(grammarAccess.getLinesAccess().getLineAssignment_1_1(), "rule__Lines__LineAssignment_1_1");
			builder.put(grammarAccess.getLinesAccess().getCondAssignment_2(), "rule__Lines__CondAssignment_2");
			builder.put(grammarAccess.getLineRangeAccess().getStartAssignment_0(), "rule__LineRange__StartAssignment_0");
			builder.put(grammarAccess.getLineRangeAccess().getEndAssignment_2(), "rule__LineRange__EndAssignment_2");
			builder.put(grammarAccess.getLineAccess().getNumberAssignment_1(), "rule__Line__NumberAssignment_1");
			builder.put(grammarAccess.getConditionAccess().getMidAssignment_0(), "rule__Condition__MidAssignment_0");
			builder.put(grammarAccess.getConditionAccess().getOrConditionAssignment_1_1(), "rule__Condition__OrConditionAssignment_1_1");
			builder.put(grammarAccess.getMidPriorityAccess().getHighAssignment_0(), "rule__MidPriority__HighAssignment_0");
			builder.put(grammarAccess.getMidPriorityAccess().getAndConditionAssignment_1_1(), "rule__MidPriority__AndConditionAssignment_1_1");
			builder.put(grammarAccess.getHighestPriorityAccess().getConditionAssignment_0(), "rule__HighestPriority__ConditionAssignment_0");
			builder.put(grammarAccess.getHighestPriorityAccess().getConditionAssignment_1_1(), "rule__HighestPriority__ConditionAssignment_1_1");
			builder.put(grammarAccess.getBinCondAccess().getColIdAssignment_0(), "rule__BinCond__ColIdAssignment_0");
			builder.put(grammarAccess.getBinCondAccess().getOperatorAssignment_1(), "rule__BinCond__OperatorAssignment_1");
			builder.put(grammarAccess.getBinCondAccess().getCompStrAssignment_2_0(), "rule__BinCond__CompStrAssignment_2_0");
			builder.put(grammarAccess.getBinCondAccess().getCompIdAssignment_2_1(), "rule__BinCond__CompIdAssignment_2_1");
			builder.put(grammarAccess.getBinCondAccess().getCompValueAssignment_2_2(), "rule__BinCond__CompValueAssignment_2_2");
			builder.put(grammarAccess.getOpCompAccess().getOpAssignment_0(), "rule__OpComp__OpAssignment_0");
			builder.put(grammarAccess.getValueAccess().getValAssignment_0(), "rule__Value__ValAssignment_0");
			builder.put(grammarAccess.getBooleanAccess().getBolAssignment_0(), "rule__Boolean__BolAssignment_0");
			builder.put(grammarAccess.getEmptyAccess().getEmptyAssignment(), "rule__Empty__EmptyAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private QsvGrammarAccess grammarAccess;

	@Override
	protected InternalQsvParser createParser() {
		InternalQsvParser result = new InternalQsvParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public QsvGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(QsvGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
