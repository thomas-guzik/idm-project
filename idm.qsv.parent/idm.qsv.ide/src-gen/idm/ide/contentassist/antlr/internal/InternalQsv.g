/*
 * generated by Xtext 2.23.0
 */
grammar InternalQsv;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package idm.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package idm.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import idm.services.QsvGrammarAccess;

}
@parser::members {
	private QsvGrammarAccess grammarAccess;

	public void setGrammarAccess(QsvGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleQuerySepartedValue
entryRuleQuerySepartedValue
:
{ before(grammarAccess.getQuerySepartedValueRule()); }
	 ruleQuerySepartedValue
{ after(grammarAccess.getQuerySepartedValueRule()); } 
	 EOF 
;

// Rule QuerySepartedValue
ruleQuerySepartedValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getQuerySepartedValueAccess().getGroup()); }
		(rule__QuerySepartedValue__Group__0)
		{ after(grammarAccess.getQuerySepartedValueAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleHeader
entryRuleHeader
:
{ before(grammarAccess.getHeaderRule()); }
	 ruleHeader
{ after(grammarAccess.getHeaderRule()); } 
	 EOF 
;

// Rule Header
ruleHeader 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getHeaderAccess().getGroup()); }
		(rule__Header__Group__0)
		{ after(grammarAccess.getHeaderAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStatement
entryRuleStatement
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStatementAccess().getStatementAssignment()); }
		(rule__Statement__StatementAssignment)
		{ after(grammarAccess.getStatementAccess().getStatementAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrint
entryRulePrint
:
{ before(grammarAccess.getPrintRule()); }
	 rulePrint
{ after(grammarAccess.getPrintRule()); } 
	 EOF 
;

// Rule Print
rulePrint 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrintAccess().getPrintAssignment()); }
		(rule__Print__PrintAssignment)
		{ after(grammarAccess.getPrintAccess().getPrintAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Header__Alternatives_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getHeaderAccess().getHasColumnNameAssignment_5_0()); }
		(rule__Header__HasColumnNameAssignment_5_0)
		{ after(grammarAccess.getHeaderAccess().getHasColumnNameAssignment_5_0()); }
	)
	|
	(
		{ before(grammarAccess.getHeaderAccess().getNoKeyword_5_1()); }
		'no'
		{ after(grammarAccess.getHeaderAccess().getNoKeyword_5_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__QuerySepartedValue__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QuerySepartedValue__Group__0__Impl
	rule__QuerySepartedValue__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QuerySepartedValue__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQuerySepartedValueAccess().getHeaderAssignment_0()); }
	(rule__QuerySepartedValue__HeaderAssignment_0)
	{ after(grammarAccess.getQuerySepartedValueAccess().getHeaderAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__QuerySepartedValue__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QuerySepartedValue__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QuerySepartedValue__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQuerySepartedValueAccess().getStatementsAssignment_1()); }
	(rule__QuerySepartedValue__StatementsAssignment_1)*
	{ after(grammarAccess.getQuerySepartedValueAccess().getStatementsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Header__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Header__Group__0__Impl
	rule__Header__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Header__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHeaderAccess().getUsingKeyword_0()); }
	'using'
	{ after(grammarAccess.getHeaderAccess().getUsingKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Header__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Header__Group__1__Impl
	rule__Header__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Header__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHeaderAccess().getNameFileAssignment_1()); }
	(rule__Header__NameFileAssignment_1)
	{ after(grammarAccess.getHeaderAccess().getNameFileAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Header__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Header__Group__2__Impl
	rule__Header__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Header__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHeaderAccess().getWithKeyword_2()); }
	'with'
	{ after(grammarAccess.getHeaderAccess().getWithKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Header__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Header__Group__3__Impl
	rule__Header__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Header__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHeaderAccess().getColumnKeyword_3()); }
	'column'
	{ after(grammarAccess.getHeaderAccess().getColumnKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Header__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Header__Group__4__Impl
	rule__Header__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Header__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHeaderAccess().getNamesKeyword_4()); }
	'names:'
	{ after(grammarAccess.getHeaderAccess().getNamesKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Header__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Header__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Header__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHeaderAccess().getAlternatives_5()); }
	(rule__Header__Alternatives_5)
	{ after(grammarAccess.getHeaderAccess().getAlternatives_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__QuerySepartedValue__HeaderAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getQuerySepartedValueAccess().getHeaderHeaderParserRuleCall_0_0()); }
		ruleHeader
		{ after(grammarAccess.getQuerySepartedValueAccess().getHeaderHeaderParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__QuerySepartedValue__StatementsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getQuerySepartedValueAccess().getStatementsStatementParserRuleCall_1_0()); }
		ruleStatement
		{ after(grammarAccess.getQuerySepartedValueAccess().getStatementsStatementParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Header__NameFileAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getHeaderAccess().getNameFileSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getHeaderAccess().getNameFileSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Header__HasColumnNameAssignment_5_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getHeaderAccess().getHasColumnNameYesKeyword_5_0_0()); }
		(
			{ before(grammarAccess.getHeaderAccess().getHasColumnNameYesKeyword_5_0_0()); }
			'yes'
			{ after(grammarAccess.getHeaderAccess().getHasColumnNameYesKeyword_5_0_0()); }
		)
		{ after(grammarAccess.getHeaderAccess().getHasColumnNameYesKeyword_5_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__StatementAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementAccess().getStatementPrintParserRuleCall_0()); }
		rulePrint
		{ after(grammarAccess.getStatementAccess().getStatementPrintParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__PrintAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrintAccess().getPrintPrintKeyword_0()); }
		(
			{ before(grammarAccess.getPrintAccess().getPrintPrintKeyword_0()); }
			'print'
			{ after(grammarAccess.getPrintAccess().getPrintPrintKeyword_0()); }
		)
		{ after(grammarAccess.getPrintAccess().getPrintPrintKeyword_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
