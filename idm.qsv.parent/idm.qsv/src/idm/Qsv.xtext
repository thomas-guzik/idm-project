grammar idm.Qsv with org.eclipse.xtext.common.Terminals
import 'http://www.eclipse.org/emf/2002/Ecore' as ecore

generate qsv "http://www.Qsv.idm"

QuerySeparatedValues:
	header = Header
	statements += Statement*
;

// TODO ? : check that column names are not used if with names = no

Header:
	'using' nameFile=STRING 'with' 'column' 'names:' (hasColumnName?='yes'|'no')
;

Statement:
	Print
;

Print:
	'print' selector=Selector
;

Selector:
	columnSelection=Columns? & lineSelection=Lines?
;

Columns:
	':columns' (columns = Column) ?
;

Column:
	ColumnNames | ColumnNumbers
;

ColumnNames:
	names += ColumnName (',' names += ColumnName)*
;

ColumnNumbers:
	numbers += ColumnNumber (',' numbers += ColumnNumber)*
;

Lines:
	':lines' (range=LineRange | line=Line | '*')? cond=Condition?
;

LineRange:
	start=INT '-' end=INT
;

Line:
	'#' number=INT
;

Condition:
	mid=MidPriority ('or' orCondition=Condition)?
;

MidPriority:
	high=HighestPriority ('and' andCondition=MidPriority)?
;

HighestPriority:
	baseCondition=BinCond
	| ( '(' nestedCondition=Condition ')' )
;

BinCond:
	columnId=ColumnIdentifier operator=OpComp compValue=Value
;

OpComp:
	(CompareEqual | CompareNotEqual | CompareLower | CompareGreater | CompareLowerOrEqual | CompareGreaterOrEqual)
;

CompareEqual:
	{CompareEqual} ('=' | 'is')
;

CompareNotEqual:
	{CompareNotEqual} ('!=' | 'is-not')
;

CompareLower:
	{CompareLower} '<'
;

CompareGreater:
	{CompareGreater} '>'
;

CompareLowerOrEqual:
	{CompareLowerOrEqual} '<='
;

CompareGreaterOrEqual:
	{CompareGreaterOrEqual} '>='
;

Value:
	IntegerValue | StringValue | BooleanValue 
;

IntegerValue:
	value = SignedInt
;

StringValue:
	value = STRING
;

BooleanValue:
	truthy?='yes' | {BooleanValue} 'no'
;

Delete:
	'delete'
;

Insert:
	'insert'
;

ColumnIdentifier:
	ColumnNumber | ColumnName
;

SignedInt returns ecore::EInt: '-'? INT;
ColumnNumber returns ecore::EString: '#' INT;
ColumnName returns ecore::EString: ID;


