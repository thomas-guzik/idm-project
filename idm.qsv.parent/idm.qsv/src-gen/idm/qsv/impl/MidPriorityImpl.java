/**
 * generated by Xtext 2.23.0
 */
package idm.qsv.impl;

import idm.qsv.HighestPriority;
import idm.qsv.MidPriority;
import idm.qsv.QsvPackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Mid Priority</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link idm.qsv.impl.MidPriorityImpl#getHigh <em>High</em>}</li>
 *   <li>{@link idm.qsv.impl.MidPriorityImpl#getAndCondition <em>And Condition</em>}</li>
 * </ul>
 *
 * @generated
 */
public class MidPriorityImpl extends MinimalEObjectImpl.Container implements MidPriority
{
  /**
   * The cached value of the '{@link #getHigh() <em>High</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getHigh()
   * @generated
   * @ordered
   */
  protected HighestPriority high;

  /**
   * The cached value of the '{@link #getAndCondition() <em>And Condition</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAndCondition()
   * @generated
   * @ordered
   */
  protected MidPriority andCondition;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MidPriorityImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return QsvPackage.Literals.MID_PRIORITY;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public HighestPriority getHigh()
  {
    return high;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetHigh(HighestPriority newHigh, NotificationChain msgs)
  {
    HighestPriority oldHigh = high;
    high = newHigh;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, QsvPackage.MID_PRIORITY__HIGH, oldHigh, newHigh);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setHigh(HighestPriority newHigh)
  {
    if (newHigh != high)
    {
      NotificationChain msgs = null;
      if (high != null)
        msgs = ((InternalEObject)high).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - QsvPackage.MID_PRIORITY__HIGH, null, msgs);
      if (newHigh != null)
        msgs = ((InternalEObject)newHigh).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - QsvPackage.MID_PRIORITY__HIGH, null, msgs);
      msgs = basicSetHigh(newHigh, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, QsvPackage.MID_PRIORITY__HIGH, newHigh, newHigh));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MidPriority getAndCondition()
  {
    return andCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAndCondition(MidPriority newAndCondition, NotificationChain msgs)
  {
    MidPriority oldAndCondition = andCondition;
    andCondition = newAndCondition;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, QsvPackage.MID_PRIORITY__AND_CONDITION, oldAndCondition, newAndCondition);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAndCondition(MidPriority newAndCondition)
  {
    if (newAndCondition != andCondition)
    {
      NotificationChain msgs = null;
      if (andCondition != null)
        msgs = ((InternalEObject)andCondition).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - QsvPackage.MID_PRIORITY__AND_CONDITION, null, msgs);
      if (newAndCondition != null)
        msgs = ((InternalEObject)newAndCondition).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - QsvPackage.MID_PRIORITY__AND_CONDITION, null, msgs);
      msgs = basicSetAndCondition(newAndCondition, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, QsvPackage.MID_PRIORITY__AND_CONDITION, newAndCondition, newAndCondition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case QsvPackage.MID_PRIORITY__HIGH:
        return basicSetHigh(null, msgs);
      case QsvPackage.MID_PRIORITY__AND_CONDITION:
        return basicSetAndCondition(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case QsvPackage.MID_PRIORITY__HIGH:
        return getHigh();
      case QsvPackage.MID_PRIORITY__AND_CONDITION:
        return getAndCondition();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case QsvPackage.MID_PRIORITY__HIGH:
        setHigh((HighestPriority)newValue);
        return;
      case QsvPackage.MID_PRIORITY__AND_CONDITION:
        setAndCondition((MidPriority)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case QsvPackage.MID_PRIORITY__HIGH:
        setHigh((HighestPriority)null);
        return;
      case QsvPackage.MID_PRIORITY__AND_CONDITION:
        setAndCondition((MidPriority)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case QsvPackage.MID_PRIORITY__HIGH:
        return high != null;
      case QsvPackage.MID_PRIORITY__AND_CONDITION:
        return andCondition != null;
    }
    return super.eIsSet(featureID);
  }

} //MidPriorityImpl
