/**
 * generated by Xtext 2.23.0
 */
package idm.qsv.impl;

import idm.qsv.BinCond;
import idm.qsv.OpComp;
import idm.qsv.QsvPackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Bin Cond</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link idm.qsv.impl.BinCondImpl#getColId <em>Col Id</em>}</li>
 *   <li>{@link idm.qsv.impl.BinCondImpl#getOperator <em>Operator</em>}</li>
 *   <li>{@link idm.qsv.impl.BinCondImpl#getCompStr <em>Comp Str</em>}</li>
 *   <li>{@link idm.qsv.impl.BinCondImpl#getCompId <em>Comp Id</em>}</li>
 *   <li>{@link idm.qsv.impl.BinCondImpl#getCompValue <em>Comp Value</em>}</li>
 * </ul>
 *
 * @generated
 */
public class BinCondImpl extends MinimalEObjectImpl.Container implements BinCond
{
  /**
   * The default value of the '{@link #getColId() <em>Col Id</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getColId()
   * @generated
   * @ordered
   */
  protected static final String COL_ID_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getColId() <em>Col Id</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getColId()
   * @generated
   * @ordered
   */
  protected String colId = COL_ID_EDEFAULT;

  /**
   * The cached value of the '{@link #getOperator() <em>Operator</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperator()
   * @generated
   * @ordered
   */
  protected OpComp operator;

  /**
   * The default value of the '{@link #getCompStr() <em>Comp Str</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCompStr()
   * @generated
   * @ordered
   */
  protected static final String COMP_STR_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getCompStr() <em>Comp Str</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCompStr()
   * @generated
   * @ordered
   */
  protected String compStr = COMP_STR_EDEFAULT;

  /**
   * The default value of the '{@link #getCompId() <em>Comp Id</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCompId()
   * @generated
   * @ordered
   */
  protected static final String COMP_ID_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getCompId() <em>Comp Id</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCompId()
   * @generated
   * @ordered
   */
  protected String compId = COMP_ID_EDEFAULT;

  /**
   * The default value of the '{@link #getCompValue() <em>Comp Value</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCompValue()
   * @generated
   * @ordered
   */
  protected static final int COMP_VALUE_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getCompValue() <em>Comp Value</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCompValue()
   * @generated
   * @ordered
   */
  protected int compValue = COMP_VALUE_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected BinCondImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return QsvPackage.Literals.BIN_COND;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getColId()
  {
    return colId;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setColId(String newColId)
  {
    String oldColId = colId;
    colId = newColId;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, QsvPackage.BIN_COND__COL_ID, oldColId, colId));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OpComp getOperator()
  {
    return operator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetOperator(OpComp newOperator, NotificationChain msgs)
  {
    OpComp oldOperator = operator;
    operator = newOperator;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, QsvPackage.BIN_COND__OPERATOR, oldOperator, newOperator);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOperator(OpComp newOperator)
  {
    if (newOperator != operator)
    {
      NotificationChain msgs = null;
      if (operator != null)
        msgs = ((InternalEObject)operator).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - QsvPackage.BIN_COND__OPERATOR, null, msgs);
      if (newOperator != null)
        msgs = ((InternalEObject)newOperator).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - QsvPackage.BIN_COND__OPERATOR, null, msgs);
      msgs = basicSetOperator(newOperator, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, QsvPackage.BIN_COND__OPERATOR, newOperator, newOperator));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getCompStr()
  {
    return compStr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCompStr(String newCompStr)
  {
    String oldCompStr = compStr;
    compStr = newCompStr;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, QsvPackage.BIN_COND__COMP_STR, oldCompStr, compStr));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getCompId()
  {
    return compId;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCompId(String newCompId)
  {
    String oldCompId = compId;
    compId = newCompId;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, QsvPackage.BIN_COND__COMP_ID, oldCompId, compId));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getCompValue()
  {
    return compValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCompValue(int newCompValue)
  {
    int oldCompValue = compValue;
    compValue = newCompValue;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, QsvPackage.BIN_COND__COMP_VALUE, oldCompValue, compValue));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case QsvPackage.BIN_COND__OPERATOR:
        return basicSetOperator(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case QsvPackage.BIN_COND__COL_ID:
        return getColId();
      case QsvPackage.BIN_COND__OPERATOR:
        return getOperator();
      case QsvPackage.BIN_COND__COMP_STR:
        return getCompStr();
      case QsvPackage.BIN_COND__COMP_ID:
        return getCompId();
      case QsvPackage.BIN_COND__COMP_VALUE:
        return getCompValue();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case QsvPackage.BIN_COND__COL_ID:
        setColId((String)newValue);
        return;
      case QsvPackage.BIN_COND__OPERATOR:
        setOperator((OpComp)newValue);
        return;
      case QsvPackage.BIN_COND__COMP_STR:
        setCompStr((String)newValue);
        return;
      case QsvPackage.BIN_COND__COMP_ID:
        setCompId((String)newValue);
        return;
      case QsvPackage.BIN_COND__COMP_VALUE:
        setCompValue((Integer)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case QsvPackage.BIN_COND__COL_ID:
        setColId(COL_ID_EDEFAULT);
        return;
      case QsvPackage.BIN_COND__OPERATOR:
        setOperator((OpComp)null);
        return;
      case QsvPackage.BIN_COND__COMP_STR:
        setCompStr(COMP_STR_EDEFAULT);
        return;
      case QsvPackage.BIN_COND__COMP_ID:
        setCompId(COMP_ID_EDEFAULT);
        return;
      case QsvPackage.BIN_COND__COMP_VALUE:
        setCompValue(COMP_VALUE_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case QsvPackage.BIN_COND__COL_ID:
        return COL_ID_EDEFAULT == null ? colId != null : !COL_ID_EDEFAULT.equals(colId);
      case QsvPackage.BIN_COND__OPERATOR:
        return operator != null;
      case QsvPackage.BIN_COND__COMP_STR:
        return COMP_STR_EDEFAULT == null ? compStr != null : !COMP_STR_EDEFAULT.equals(compStr);
      case QsvPackage.BIN_COND__COMP_ID:
        return COMP_ID_EDEFAULT == null ? compId != null : !COMP_ID_EDEFAULT.equals(compId);
      case QsvPackage.BIN_COND__COMP_VALUE:
        return compValue != COMP_VALUE_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (colId: ");
    result.append(colId);
    result.append(", compStr: ");
    result.append(compStr);
    result.append(", compId: ");
    result.append(compId);
    result.append(", compValue: ");
    result.append(compValue);
    result.append(')');
    return result.toString();
  }

} //BinCondImpl
