/**
 * generated by Xtext 2.23.0
 */
package idm.qsv.impl;

import idm.qsv.Condition;
import idm.qsv.MidPriority;
import idm.qsv.QsvPackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Condition</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link idm.qsv.impl.ConditionImpl#getMid <em>Mid</em>}</li>
 *   <li>{@link idm.qsv.impl.ConditionImpl#getOrCondition <em>Or Condition</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ConditionImpl extends MinimalEObjectImpl.Container implements Condition
{
  /**
   * The cached value of the '{@link #getMid() <em>Mid</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMid()
   * @generated
   * @ordered
   */
  protected MidPriority mid;

  /**
   * The cached value of the '{@link #getOrCondition() <em>Or Condition</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOrCondition()
   * @generated
   * @ordered
   */
  protected Condition orCondition;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ConditionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return QsvPackage.Literals.CONDITION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MidPriority getMid()
  {
    return mid;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMid(MidPriority newMid, NotificationChain msgs)
  {
    MidPriority oldMid = mid;
    mid = newMid;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, QsvPackage.CONDITION__MID, oldMid, newMid);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMid(MidPriority newMid)
  {
    if (newMid != mid)
    {
      NotificationChain msgs = null;
      if (mid != null)
        msgs = ((InternalEObject)mid).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - QsvPackage.CONDITION__MID, null, msgs);
      if (newMid != null)
        msgs = ((InternalEObject)newMid).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - QsvPackage.CONDITION__MID, null, msgs);
      msgs = basicSetMid(newMid, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, QsvPackage.CONDITION__MID, newMid, newMid));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Condition getOrCondition()
  {
    return orCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetOrCondition(Condition newOrCondition, NotificationChain msgs)
  {
    Condition oldOrCondition = orCondition;
    orCondition = newOrCondition;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, QsvPackage.CONDITION__OR_CONDITION, oldOrCondition, newOrCondition);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOrCondition(Condition newOrCondition)
  {
    if (newOrCondition != orCondition)
    {
      NotificationChain msgs = null;
      if (orCondition != null)
        msgs = ((InternalEObject)orCondition).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - QsvPackage.CONDITION__OR_CONDITION, null, msgs);
      if (newOrCondition != null)
        msgs = ((InternalEObject)newOrCondition).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - QsvPackage.CONDITION__OR_CONDITION, null, msgs);
      msgs = basicSetOrCondition(newOrCondition, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, QsvPackage.CONDITION__OR_CONDITION, newOrCondition, newOrCondition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case QsvPackage.CONDITION__MID:
        return basicSetMid(null, msgs);
      case QsvPackage.CONDITION__OR_CONDITION:
        return basicSetOrCondition(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case QsvPackage.CONDITION__MID:
        return getMid();
      case QsvPackage.CONDITION__OR_CONDITION:
        return getOrCondition();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case QsvPackage.CONDITION__MID:
        setMid((MidPriority)newValue);
        return;
      case QsvPackage.CONDITION__OR_CONDITION:
        setOrCondition((Condition)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case QsvPackage.CONDITION__MID:
        setMid((MidPriority)null);
        return;
      case QsvPackage.CONDITION__OR_CONDITION:
        setOrCondition((Condition)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case QsvPackage.CONDITION__MID:
        return mid != null;
      case QsvPackage.CONDITION__OR_CONDITION:
        return orCondition != null;
    }
    return super.eIsSet(featureID);
  }

} //ConditionImpl
