/**
 * generated by Xtext 2.23.0
 */
package idm.qsv.impl;

import idm.qsv.Columns;
import idm.qsv.Lines;
import idm.qsv.QsvPackage;
import idm.qsv.Selector;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Selector</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link idm.qsv.impl.SelectorImpl#getColumns <em>Columns</em>}</li>
 *   <li>{@link idm.qsv.impl.SelectorImpl#getLines <em>Lines</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SelectorImpl extends MinimalEObjectImpl.Container implements Selector
{
  /**
   * The cached value of the '{@link #getColumns() <em>Columns</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getColumns()
   * @generated
   * @ordered
   */
  protected Columns columns;

  /**
   * The cached value of the '{@link #getLines() <em>Lines</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLines()
   * @generated
   * @ordered
   */
  protected Lines lines;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SelectorImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return QsvPackage.Literals.SELECTOR;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Columns getColumns()
  {
    return columns;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetColumns(Columns newColumns, NotificationChain msgs)
  {
    Columns oldColumns = columns;
    columns = newColumns;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, QsvPackage.SELECTOR__COLUMNS, oldColumns, newColumns);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setColumns(Columns newColumns)
  {
    if (newColumns != columns)
    {
      NotificationChain msgs = null;
      if (columns != null)
        msgs = ((InternalEObject)columns).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - QsvPackage.SELECTOR__COLUMNS, null, msgs);
      if (newColumns != null)
        msgs = ((InternalEObject)newColumns).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - QsvPackage.SELECTOR__COLUMNS, null, msgs);
      msgs = basicSetColumns(newColumns, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, QsvPackage.SELECTOR__COLUMNS, newColumns, newColumns));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Lines getLines()
  {
    return lines;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLines(Lines newLines, NotificationChain msgs)
  {
    Lines oldLines = lines;
    lines = newLines;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, QsvPackage.SELECTOR__LINES, oldLines, newLines);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLines(Lines newLines)
  {
    if (newLines != lines)
    {
      NotificationChain msgs = null;
      if (lines != null)
        msgs = ((InternalEObject)lines).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - QsvPackage.SELECTOR__LINES, null, msgs);
      if (newLines != null)
        msgs = ((InternalEObject)newLines).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - QsvPackage.SELECTOR__LINES, null, msgs);
      msgs = basicSetLines(newLines, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, QsvPackage.SELECTOR__LINES, newLines, newLines));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case QsvPackage.SELECTOR__COLUMNS:
        return basicSetColumns(null, msgs);
      case QsvPackage.SELECTOR__LINES:
        return basicSetLines(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case QsvPackage.SELECTOR__COLUMNS:
        return getColumns();
      case QsvPackage.SELECTOR__LINES:
        return getLines();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case QsvPackage.SELECTOR__COLUMNS:
        setColumns((Columns)newValue);
        return;
      case QsvPackage.SELECTOR__LINES:
        setLines((Lines)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case QsvPackage.SELECTOR__COLUMNS:
        setColumns((Columns)null);
        return;
      case QsvPackage.SELECTOR__LINES:
        setLines((Lines)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case QsvPackage.SELECTOR__COLUMNS:
        return columns != null;
      case QsvPackage.SELECTOR__LINES:
        return lines != null;
    }
    return super.eIsSet(featureID);
  }

} //SelectorImpl
