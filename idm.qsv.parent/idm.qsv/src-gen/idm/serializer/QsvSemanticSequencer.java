/*
 * generated by Xtext 2.23.0
 */
package idm.serializer;

import com.google.inject.Inject;
import idm.qsv.Header;
import idm.qsv.Print;
import idm.qsv.QsvPackage;
import idm.qsv.QuerySepartedValue;
import idm.qsv.Statement;
import idm.services.QsvGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class QsvSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private QsvGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == QsvPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case QsvPackage.HEADER:
				sequence_Header(context, (Header) semanticObject); 
				return; 
			case QsvPackage.PRINT:
				sequence_Print(context, (Print) semanticObject); 
				return; 
			case QsvPackage.QUERY_SEPARTED_VALUE:
				sequence_QuerySepartedValue(context, (QuerySepartedValue) semanticObject); 
				return; 
			case QsvPackage.STATEMENT:
				sequence_Statement(context, (Statement) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Header returns Header
	 *
	 * Constraint:
	 *     (nameFile=STRING hasColumnName?='yes'?)
	 */
	protected void sequence_Header(ISerializationContext context, Header semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Print returns Print
	 *
	 * Constraint:
	 *     print='print'
	 */
	protected void sequence_Print(ISerializationContext context, Print semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QsvPackage.Literals.PRINT__PRINT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QsvPackage.Literals.PRINT__PRINT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPrintAccess().getPrintPrintKeyword_0(), semanticObject.getPrint());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     QuerySepartedValue returns QuerySepartedValue
	 *
	 * Constraint:
	 *     (header=Header statements+=Statement*)
	 */
	protected void sequence_QuerySepartedValue(ISerializationContext context, QuerySepartedValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns Statement
	 *
	 * Constraint:
	 *     statement=Print
	 */
	protected void sequence_Statement(ISerializationContext context, Statement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QsvPackage.Literals.STATEMENT__STATEMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QsvPackage.Literals.STATEMENT__STATEMENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStatementAccess().getStatementPrintParserRuleCall_0(), semanticObject.getStatement());
		feeder.finish();
	}
	
	
}
