/*
 * generated by Xtext 2.23.0
 */
package idm.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class QsvGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class QuerySeparatedValuesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "idm.Qsv.QuerySeparatedValues");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cHeaderAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cHeaderHeaderParserRuleCall_0_0 = (RuleCall)cHeaderAssignment_0.eContents().get(0);
		private final Assignment cStatementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_1_0 = (RuleCall)cStatementsAssignment_1.eContents().get(0);
		
		//QuerySeparatedValues:
		//	header=Header
		//	statements+=Statement*;
		@Override public ParserRule getRule() { return rule; }
		
		//header=Header statements+=Statement*
		public Group getGroup() { return cGroup; }
		
		//header=Header
		public Assignment getHeaderAssignment_0() { return cHeaderAssignment_0; }
		
		//Header
		public RuleCall getHeaderHeaderParserRuleCall_0_0() { return cHeaderHeaderParserRuleCall_0_0; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_1() { return cStatementsAssignment_1; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_1_0() { return cStatementsStatementParserRuleCall_1_0; }
	}
	public class HeaderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "idm.Qsv.Header");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUsingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameFileAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameFileSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameFileAssignment_1.eContents().get(0);
		private final Keyword cWithKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cColumnKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cNamesKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cHasColumnNameAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final Keyword cHasColumnNameYesKeyword_5_0_0 = (Keyword)cHasColumnNameAssignment_5_0.eContents().get(0);
		private final Keyword cNoKeyword_5_1 = (Keyword)cAlternatives_5.eContents().get(1);
		
		//Header:
		//	'using' nameFile=STRING 'with' 'column' 'names:' (hasColumnName?='yes' | 'no');
		@Override public ParserRule getRule() { return rule; }
		
		//'using' nameFile=STRING 'with' 'column' 'names:' (hasColumnName?='yes' | 'no')
		public Group getGroup() { return cGroup; }
		
		//'using'
		public Keyword getUsingKeyword_0() { return cUsingKeyword_0; }
		
		//nameFile=STRING
		public Assignment getNameFileAssignment_1() { return cNameFileAssignment_1; }
		
		//STRING
		public RuleCall getNameFileSTRINGTerminalRuleCall_1_0() { return cNameFileSTRINGTerminalRuleCall_1_0; }
		
		//'with'
		public Keyword getWithKeyword_2() { return cWithKeyword_2; }
		
		//'column'
		public Keyword getColumnKeyword_3() { return cColumnKeyword_3; }
		
		//'names:'
		public Keyword getNamesKeyword_4() { return cNamesKeyword_4; }
		
		//(hasColumnName?='yes' | 'no')
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//hasColumnName?='yes'
		public Assignment getHasColumnNameAssignment_5_0() { return cHasColumnNameAssignment_5_0; }
		
		//'yes'
		public Keyword getHasColumnNameYesKeyword_5_0_0() { return cHasColumnNameYesKeyword_5_0_0; }
		
		//'no'
		public Keyword getNoKeyword_5_1() { return cNoKeyword_5_1; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "idm.Qsv.Statement");
		private final Assignment cStatementAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStatementPrintParserRuleCall_0 = (RuleCall)cStatementAssignment.eContents().get(0);
		
		//Statement:
		//	statement=Print;
		@Override public ParserRule getRule() { return rule; }
		
		//statement=Print
		public Assignment getStatementAssignment() { return cStatementAssignment; }
		
		//Print
		public RuleCall getStatementPrintParserRuleCall_0() { return cStatementPrintParserRuleCall_0; }
	}
	public class PrintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "idm.Qsv.Print");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrintKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSelectorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSelectorSelectorParserRuleCall_1_0 = (RuleCall)cSelectorAssignment_1.eContents().get(0);
		
		//Print:
		//	'print' selector=Selector;
		@Override public ParserRule getRule() { return rule; }
		
		//'print' selector=Selector
		public Group getGroup() { return cGroup; }
		
		//'print'
		public Keyword getPrintKeyword_0() { return cPrintKeyword_0; }
		
		//selector=Selector
		public Assignment getSelectorAssignment_1() { return cSelectorAssignment_1; }
		
		//Selector
		public RuleCall getSelectorSelectorParserRuleCall_1_0() { return cSelectorSelectorParserRuleCall_1_0; }
	}
	public class SelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "idm.Qsv.Selector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cColumnsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cColumnsColumnsParserRuleCall_0_0 = (RuleCall)cColumnsAssignment_0.eContents().get(0);
		private final Assignment cLinesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLinesLinesParserRuleCall_1_0 = (RuleCall)cLinesAssignment_1.eContents().get(0);
		
		//Selector:
		//	columns=Columns? lines=Lines?;
		@Override public ParserRule getRule() { return rule; }
		
		//// Region
		//columns=Columns? lines=Lines?
		public Group getGroup() { return cGroup; }
		
		//// Region
		//columns=Columns?
		public Assignment getColumnsAssignment_0() { return cColumnsAssignment_0; }
		
		//Columns
		public RuleCall getColumnsColumnsParserRuleCall_0_0() { return cColumnsColumnsParserRuleCall_0_0; }
		
		//lines=Lines?
		public Assignment getLinesAssignment_1() { return cLinesAssignment_1; }
		
		//Lines
		public RuleCall getLinesLinesParserRuleCall_1_0() { return cLinesLinesParserRuleCall_1_0; }
	}
	public class ColumnsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "idm.Qsv.Columns");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColumnsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cRangeAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cRangeColRangeParserRuleCall_1_0_0 = (RuleCall)cRangeAssignment_1_0.eContents().get(0);
		private final Assignment cColumnAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cColumnColumnParserRuleCall_1_1_0 = (RuleCall)cColumnAssignment_1_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_2 = (Keyword)cAlternatives_1.eContents().get(2);
		
		//Columns:
		//	':columns' (range=ColRange | column=Column | '*')?;
		@Override public ParserRule getRule() { return rule; }
		
		//':columns' (range=ColRange | column=Column | '*')?
		public Group getGroup() { return cGroup; }
		
		//':columns'
		public Keyword getColumnsKeyword_0() { return cColumnsKeyword_0; }
		
		//(range=ColRange | column=Column | '*')?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//range=ColRange
		public Assignment getRangeAssignment_1_0() { return cRangeAssignment_1_0; }
		
		//ColRange
		public RuleCall getRangeColRangeParserRuleCall_1_0_0() { return cRangeColRangeParserRuleCall_1_0_0; }
		
		//column=Column
		public Assignment getColumnAssignment_1_1() { return cColumnAssignment_1_1; }
		
		//Column
		public RuleCall getColumnColumnParserRuleCall_1_1_0() { return cColumnColumnParserRuleCall_1_1_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_2() { return cAsteriskKeyword_1_2; }
	}
	public class ColRangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "idm.Qsv.ColRange");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStartAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStartColumnParserRuleCall_0_0 = (RuleCall)cStartAssignment_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEndAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEndColumnParserRuleCall_2_0 = (RuleCall)cEndAssignment_2.eContents().get(0);
		
		//ColRange:
		//	start=Column '-' end=Column;
		@Override public ParserRule getRule() { return rule; }
		
		//start=Column '-' end=Column
		public Group getGroup() { return cGroup; }
		
		//start=Column
		public Assignment getStartAssignment_0() { return cStartAssignment_0; }
		
		//Column
		public RuleCall getStartColumnParserRuleCall_0_0() { return cStartColumnParserRuleCall_0_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
		
		//end=Column
		public Assignment getEndAssignment_2() { return cEndAssignment_2; }
		
		//Column
		public RuleCall getEndColumnParserRuleCall_2_0() { return cEndColumnParserRuleCall_2_0; }
	}
	public class ColumnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "idm.Qsv.Column");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cColumnNameParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cColumnNumberParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Column:
		//	ColumnName | ColumnNumber;
		@Override public ParserRule getRule() { return rule; }
		
		//ColumnName | ColumnNumber
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ColumnName
		public RuleCall getColumnNameParserRuleCall_0() { return cColumnNameParserRuleCall_0; }
		
		//ColumnNumber
		public RuleCall getColumnNumberParserRuleCall_1() { return cColumnNumberParserRuleCall_1; }
	}
	public class ColumnNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "idm.Qsv.ColumnName");
		private final Assignment cNamebAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNamebIDTerminalRuleCall_0 = (RuleCall)cNamebAssignment.eContents().get(0);
		
		//ColumnName:
		//	nameb=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//nameb=ID
		public Assignment getNamebAssignment() { return cNamebAssignment; }
		
		//ID
		public RuleCall getNamebIDTerminalRuleCall_0() { return cNamebIDTerminalRuleCall_0; }
	}
	public class ColumnNumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "idm.Qsv.ColumnNumber");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNumberAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNumberINTTerminalRuleCall_1_0 = (RuleCall)cNumberAssignment_1.eContents().get(0);
		
		//ColumnNumber:
		//	'#' number=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'#' number=INT
		public Group getGroup() { return cGroup; }
		
		//'#'
		public Keyword getNumberSignKeyword_0() { return cNumberSignKeyword_0; }
		
		//number=INT
		public Assignment getNumberAssignment_1() { return cNumberAssignment_1; }
		
		//INT
		public RuleCall getNumberINTTerminalRuleCall_1_0() { return cNumberINTTerminalRuleCall_1_0; }
	}
	public class LinesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "idm.Qsv.Lines");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLinesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cRangeAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cRangeLineRangeParserRuleCall_1_0_0 = (RuleCall)cRangeAssignment_1_0.eContents().get(0);
		private final Assignment cLineAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cLineLineParserRuleCall_1_1_0 = (RuleCall)cLineAssignment_1_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_2 = (Keyword)cAlternatives_1.eContents().get(2);
		private final Assignment cCondAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCondConditionParserRuleCall_2_0 = (RuleCall)cCondAssignment_2.eContents().get(0);
		
		//Lines:
		//	':lines' (range=LineRange | line=Line | '*')? cond=Condition?;
		@Override public ParserRule getRule() { return rule; }
		
		//':lines' (range=LineRange | line=Line | '*')? cond=Condition?
		public Group getGroup() { return cGroup; }
		
		//':lines'
		public Keyword getLinesKeyword_0() { return cLinesKeyword_0; }
		
		//(range=LineRange | line=Line | '*')?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//range=LineRange
		public Assignment getRangeAssignment_1_0() { return cRangeAssignment_1_0; }
		
		//LineRange
		public RuleCall getRangeLineRangeParserRuleCall_1_0_0() { return cRangeLineRangeParserRuleCall_1_0_0; }
		
		//line=Line
		public Assignment getLineAssignment_1_1() { return cLineAssignment_1_1; }
		
		//Line
		public RuleCall getLineLineParserRuleCall_1_1_0() { return cLineLineParserRuleCall_1_1_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_2() { return cAsteriskKeyword_1_2; }
		
		//cond=Condition?
		public Assignment getCondAssignment_2() { return cCondAssignment_2; }
		
		//Condition
		public RuleCall getCondConditionParserRuleCall_2_0() { return cCondConditionParserRuleCall_2_0; }
	}
	public class LineRangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "idm.Qsv.LineRange");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStartAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStartINTTerminalRuleCall_0_0 = (RuleCall)cStartAssignment_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEndAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEndINTTerminalRuleCall_2_0 = (RuleCall)cEndAssignment_2.eContents().get(0);
		
		//LineRange:
		//	start=INT '-' end=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//start=INT '-' end=INT
		public Group getGroup() { return cGroup; }
		
		//start=INT
		public Assignment getStartAssignment_0() { return cStartAssignment_0; }
		
		//INT
		public RuleCall getStartINTTerminalRuleCall_0_0() { return cStartINTTerminalRuleCall_0_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
		
		//end=INT
		public Assignment getEndAssignment_2() { return cEndAssignment_2; }
		
		//INT
		public RuleCall getEndINTTerminalRuleCall_2_0() { return cEndINTTerminalRuleCall_2_0; }
	}
	public class LineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "idm.Qsv.Line");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNumberAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNumberINTTerminalRuleCall_1_0 = (RuleCall)cNumberAssignment_1.eContents().get(0);
		
		//Line:
		//	'#' number=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'#' number=INT
		public Group getGroup() { return cGroup; }
		
		//'#'
		public Keyword getNumberSignKeyword_0() { return cNumberSignKeyword_0; }
		
		//number=INT
		public Assignment getNumberAssignment_1() { return cNumberAssignment_1; }
		
		//INT
		public RuleCall getNumberINTTerminalRuleCall_1_0() { return cNumberINTTerminalRuleCall_1_0; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "idm.Qsv.Condition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMidAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMidMidPriorityParserRuleCall_0_0 = (RuleCall)cMidAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cOrKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOrConditionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOrConditionConditionParserRuleCall_1_1_0 = (RuleCall)cOrConditionAssignment_1_1.eContents().get(0);
		
		//Condition:
		//	mid=MidPriority ('or' orCondition=Condition)?;
		@Override public ParserRule getRule() { return rule; }
		
		//mid=MidPriority ('or' orCondition=Condition)?
		public Group getGroup() { return cGroup; }
		
		//mid=MidPriority
		public Assignment getMidAssignment_0() { return cMidAssignment_0; }
		
		//MidPriority
		public RuleCall getMidMidPriorityParserRuleCall_0_0() { return cMidMidPriorityParserRuleCall_0_0; }
		
		//('or' orCondition=Condition)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'or'
		public Keyword getOrKeyword_1_0() { return cOrKeyword_1_0; }
		
		//orCondition=Condition
		public Assignment getOrConditionAssignment_1_1() { return cOrConditionAssignment_1_1; }
		
		//Condition
		public RuleCall getOrConditionConditionParserRuleCall_1_1_0() { return cOrConditionConditionParserRuleCall_1_1_0; }
	}
	public class MidPriorityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "idm.Qsv.MidPriority");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cHighAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cHighHighestPriorityParserRuleCall_0_0 = (RuleCall)cHighAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAndKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAndConditionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAndConditionMidPriorityParserRuleCall_1_1_0 = (RuleCall)cAndConditionAssignment_1_1.eContents().get(0);
		
		//MidPriority:
		//	high=HighestPriority ('and' andCondition=MidPriority)?;
		@Override public ParserRule getRule() { return rule; }
		
		//high=HighestPriority ('and' andCondition=MidPriority)?
		public Group getGroup() { return cGroup; }
		
		//high=HighestPriority
		public Assignment getHighAssignment_0() { return cHighAssignment_0; }
		
		//HighestPriority
		public RuleCall getHighHighestPriorityParserRuleCall_0_0() { return cHighHighestPriorityParserRuleCall_0_0; }
		
		//('and' andCondition=MidPriority)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'and'
		public Keyword getAndKeyword_1_0() { return cAndKeyword_1_0; }
		
		//andCondition=MidPriority
		public Assignment getAndConditionAssignment_1_1() { return cAndConditionAssignment_1_1; }
		
		//MidPriority
		public RuleCall getAndConditionMidPriorityParserRuleCall_1_1_0() { return cAndConditionMidPriorityParserRuleCall_1_1_0; }
	}
	public class HighestPriorityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "idm.Qsv.HighestPriority");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cConditionAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cConditionBinCondParserRuleCall_0_0 = (RuleCall)cConditionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cConditionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cConditionConditionParserRuleCall_1_1_0 = (RuleCall)cConditionAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//HighestPriority:
		//	condition=BinCond
		//	| '(' condition=Condition ')';
		@Override public ParserRule getRule() { return rule; }
		
		//condition=BinCond | '(' condition=Condition ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//condition=BinCond
		public Assignment getConditionAssignment_0() { return cConditionAssignment_0; }
		
		//BinCond
		public RuleCall getConditionBinCondParserRuleCall_0_0() { return cConditionBinCondParserRuleCall_0_0; }
		
		//'(' condition=Condition ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//condition=Condition
		public Assignment getConditionAssignment_1_1() { return cConditionAssignment_1_1; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_1_1_0() { return cConditionConditionParserRuleCall_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	public class BinCondElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "idm.Qsv.BinCond");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cColIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cColIdIDTerminalRuleCall_0_0 = (RuleCall)cColIdAssignment_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorOpCompParserRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cCompStrAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cCompStrSTRINGTerminalRuleCall_2_0_0 = (RuleCall)cCompStrAssignment_2_0.eContents().get(0);
		private final Assignment cCompIdAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cCompIdIDTerminalRuleCall_2_1_0 = (RuleCall)cCompIdAssignment_2_1.eContents().get(0);
		private final Assignment cCompValueAssignment_2_2 = (Assignment)cAlternatives_2.eContents().get(2);
		private final RuleCall cCompValueINTTerminalRuleCall_2_2_0 = (RuleCall)cCompValueAssignment_2_2.eContents().get(0);
		
		//BinCond:
		//	colId=ID operator=OpComp (compStr=STRING | compId=ID | compValue=INT);
		@Override public ParserRule getRule() { return rule; }
		
		//colId=ID operator=OpComp (compStr=STRING | compId=ID | compValue=INT)
		public Group getGroup() { return cGroup; }
		
		//colId=ID
		public Assignment getColIdAssignment_0() { return cColIdAssignment_0; }
		
		//ID
		public RuleCall getColIdIDTerminalRuleCall_0_0() { return cColIdIDTerminalRuleCall_0_0; }
		
		//operator=OpComp
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }
		
		//OpComp
		public RuleCall getOperatorOpCompParserRuleCall_1_0() { return cOperatorOpCompParserRuleCall_1_0; }
		
		//(compStr=STRING | compId=ID | compValue=INT)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//compStr=STRING
		public Assignment getCompStrAssignment_2_0() { return cCompStrAssignment_2_0; }
		
		//STRING
		public RuleCall getCompStrSTRINGTerminalRuleCall_2_0_0() { return cCompStrSTRINGTerminalRuleCall_2_0_0; }
		
		//compId=ID
		public Assignment getCompIdAssignment_2_1() { return cCompIdAssignment_2_1; }
		
		//ID
		public RuleCall getCompIdIDTerminalRuleCall_2_1_0() { return cCompIdIDTerminalRuleCall_2_1_0; }
		
		//compValue=INT
		public Assignment getCompValueAssignment_2_2() { return cCompValueAssignment_2_2; }
		
		//INT
		public RuleCall getCompValueINTTerminalRuleCall_2_2_0() { return cCompValueINTTerminalRuleCall_2_2_0; }
	}
	public class OpCompElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "idm.Qsv.OpComp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cOpEqualsSignKeyword_0_0 = (Keyword)cOpAssignment_0.eContents().get(0);
		private final Keyword cInKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cLessThanSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cLessThanSignEqualsSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cGreaterThanSignEqualsSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cExclamationMarkEqualsSignKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cNotInKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		
		//OpComp:
		//	op='=' | 'in' | '<' | '>' | '<=' | '>=' | '!=' | 'not in';
		@Override public ParserRule getRule() { return rule; }
		
		//op='=' | 'in' | '<' | '>' | '<=' | '>=' | '!=' | 'not in'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//op='='
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }
		
		//'='
		public Keyword getOpEqualsSignKeyword_0_0() { return cOpEqualsSignKeyword_0_0; }
		
		//'in'
		public Keyword getInKeyword_1() { return cInKeyword_1; }
		
		//'<'
		public Keyword getLessThanSignKeyword_2() { return cLessThanSignKeyword_2; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_4() { return cLessThanSignEqualsSignKeyword_4; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_5() { return cGreaterThanSignEqualsSignKeyword_5; }
		
		//'!='
		public Keyword getExclamationMarkEqualsSignKeyword_6() { return cExclamationMarkEqualsSignKeyword_6; }
		
		//'not in'
		public Keyword getNotInKeyword_7() { return cNotInKeyword_7; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "idm.Qsv.Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cValINTTerminalRuleCall_0_0 = (RuleCall)cValAssignment_0.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBooleanParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Value:
		//	val=INT | STRING | Boolean;
		@Override public ParserRule getRule() { return rule; }
		
		//val=INT | STRING | Boolean
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//val=INT
		public Assignment getValAssignment_0() { return cValAssignment_0; }
		
		//INT
		public RuleCall getValINTTerminalRuleCall_0_0() { return cValINTTerminalRuleCall_0_0; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }
		
		//Boolean
		public RuleCall getBooleanParserRuleCall_2() { return cBooleanParserRuleCall_2; }
	}
	public class BooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "idm.Qsv.Boolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cBolAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cBolYesKeyword_0_0 = (Keyword)cBolAssignment_0.eContents().get(0);
		private final Keyword cNoKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Boolean:
		//	bol='yes' | 'no';
		@Override public ParserRule getRule() { return rule; }
		
		//bol='yes' | 'no'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//bol='yes'
		public Assignment getBolAssignment_0() { return cBolAssignment_0; }
		
		//'yes'
		public Keyword getBolYesKeyword_0_0() { return cBolYesKeyword_0_0; }
		
		//'no'
		public Keyword getNoKeyword_1() { return cNoKeyword_1; }
	}
	public class EmptyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "idm.Qsv.Empty");
		private final Assignment cEmptyAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cEmptySpaceKeyword_0 = (Keyword)cEmptyAssignment.eContents().get(0);
		
		//Empty:
		//	empty=' '?;
		@Override public ParserRule getRule() { return rule; }
		
		//empty=' '?
		public Assignment getEmptyAssignment() { return cEmptyAssignment; }
		
		//' '
		public Keyword getEmptySpaceKeyword_0() { return cEmptySpaceKeyword_0; }
	}
	public class DeleteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "idm.Qsv.Delete");
		private final Keyword cDeleteKeyword = (Keyword)rule.eContents().get(1);
		
		//Delete:
		//	'delete';
		@Override public ParserRule getRule() { return rule; }
		
		//'delete'
		public Keyword getDeleteKeyword() { return cDeleteKeyword; }
	}
	public class InsertElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "idm.Qsv.Insert");
		private final Keyword cInsertKeyword = (Keyword)rule.eContents().get(1);
		
		//Insert:
		//	'insert';
		@Override public ParserRule getRule() { return rule; }
		
		//'insert'
		public Keyword getInsertKeyword() { return cInsertKeyword; }
	}
	
	
	private final QuerySeparatedValuesElements pQuerySeparatedValues;
	private final HeaderElements pHeader;
	private final StatementElements pStatement;
	private final PrintElements pPrint;
	private final SelectorElements pSelector;
	private final ColumnsElements pColumns;
	private final ColRangeElements pColRange;
	private final ColumnElements pColumn;
	private final ColumnNameElements pColumnName;
	private final ColumnNumberElements pColumnNumber;
	private final LinesElements pLines;
	private final LineRangeElements pLineRange;
	private final LineElements pLine;
	private final ConditionElements pCondition;
	private final MidPriorityElements pMidPriority;
	private final HighestPriorityElements pHighestPriority;
	private final BinCondElements pBinCond;
	private final OpCompElements pOpComp;
	private final ValueElements pValue;
	private final BooleanElements pBoolean;
	private final EmptyElements pEmpty;
	private final DeleteElements pDelete;
	private final InsertElements pInsert;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public QsvGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pQuerySeparatedValues = new QuerySeparatedValuesElements();
		this.pHeader = new HeaderElements();
		this.pStatement = new StatementElements();
		this.pPrint = new PrintElements();
		this.pSelector = new SelectorElements();
		this.pColumns = new ColumnsElements();
		this.pColRange = new ColRangeElements();
		this.pColumn = new ColumnElements();
		this.pColumnName = new ColumnNameElements();
		this.pColumnNumber = new ColumnNumberElements();
		this.pLines = new LinesElements();
		this.pLineRange = new LineRangeElements();
		this.pLine = new LineElements();
		this.pCondition = new ConditionElements();
		this.pMidPriority = new MidPriorityElements();
		this.pHighestPriority = new HighestPriorityElements();
		this.pBinCond = new BinCondElements();
		this.pOpComp = new OpCompElements();
		this.pValue = new ValueElements();
		this.pBoolean = new BooleanElements();
		this.pEmpty = new EmptyElements();
		this.pDelete = new DeleteElements();
		this.pInsert = new InsertElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("idm.Qsv".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//QuerySeparatedValues:
	//	header=Header
	//	statements+=Statement*;
	public QuerySeparatedValuesElements getQuerySeparatedValuesAccess() {
		return pQuerySeparatedValues;
	}
	
	public ParserRule getQuerySeparatedValuesRule() {
		return getQuerySeparatedValuesAccess().getRule();
	}
	
	//Header:
	//	'using' nameFile=STRING 'with' 'column' 'names:' (hasColumnName?='yes' | 'no');
	public HeaderElements getHeaderAccess() {
		return pHeader;
	}
	
	public ParserRule getHeaderRule() {
		return getHeaderAccess().getRule();
	}
	
	//Statement:
	//	statement=Print;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//Print:
	//	'print' selector=Selector;
	public PrintElements getPrintAccess() {
		return pPrint;
	}
	
	public ParserRule getPrintRule() {
		return getPrintAccess().getRule();
	}
	
	//Selector:
	//	columns=Columns? lines=Lines?;
	public SelectorElements getSelectorAccess() {
		return pSelector;
	}
	
	public ParserRule getSelectorRule() {
		return getSelectorAccess().getRule();
	}
	
	//Columns:
	//	':columns' (range=ColRange | column=Column | '*')?;
	public ColumnsElements getColumnsAccess() {
		return pColumns;
	}
	
	public ParserRule getColumnsRule() {
		return getColumnsAccess().getRule();
	}
	
	//ColRange:
	//	start=Column '-' end=Column;
	public ColRangeElements getColRangeAccess() {
		return pColRange;
	}
	
	public ParserRule getColRangeRule() {
		return getColRangeAccess().getRule();
	}
	
	//Column:
	//	ColumnName | ColumnNumber;
	public ColumnElements getColumnAccess() {
		return pColumn;
	}
	
	public ParserRule getColumnRule() {
		return getColumnAccess().getRule();
	}
	
	//ColumnName:
	//	nameb=ID;
	public ColumnNameElements getColumnNameAccess() {
		return pColumnName;
	}
	
	public ParserRule getColumnNameRule() {
		return getColumnNameAccess().getRule();
	}
	
	//ColumnNumber:
	//	'#' number=INT;
	public ColumnNumberElements getColumnNumberAccess() {
		return pColumnNumber;
	}
	
	public ParserRule getColumnNumberRule() {
		return getColumnNumberAccess().getRule();
	}
	
	//Lines:
	//	':lines' (range=LineRange | line=Line | '*')? cond=Condition?;
	public LinesElements getLinesAccess() {
		return pLines;
	}
	
	public ParserRule getLinesRule() {
		return getLinesAccess().getRule();
	}
	
	//LineRange:
	//	start=INT '-' end=INT;
	public LineRangeElements getLineRangeAccess() {
		return pLineRange;
	}
	
	public ParserRule getLineRangeRule() {
		return getLineRangeAccess().getRule();
	}
	
	//Line:
	//	'#' number=INT;
	public LineElements getLineAccess() {
		return pLine;
	}
	
	public ParserRule getLineRule() {
		return getLineAccess().getRule();
	}
	
	//Condition:
	//	mid=MidPriority ('or' orCondition=Condition)?;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//MidPriority:
	//	high=HighestPriority ('and' andCondition=MidPriority)?;
	public MidPriorityElements getMidPriorityAccess() {
		return pMidPriority;
	}
	
	public ParserRule getMidPriorityRule() {
		return getMidPriorityAccess().getRule();
	}
	
	//HighestPriority:
	//	condition=BinCond
	//	| '(' condition=Condition ')';
	public HighestPriorityElements getHighestPriorityAccess() {
		return pHighestPriority;
	}
	
	public ParserRule getHighestPriorityRule() {
		return getHighestPriorityAccess().getRule();
	}
	
	//BinCond:
	//	colId=ID operator=OpComp (compStr=STRING | compId=ID | compValue=INT);
	public BinCondElements getBinCondAccess() {
		return pBinCond;
	}
	
	public ParserRule getBinCondRule() {
		return getBinCondAccess().getRule();
	}
	
	//OpComp:
	//	op='=' | 'in' | '<' | '>' | '<=' | '>=' | '!=' | 'not in';
	public OpCompElements getOpCompAccess() {
		return pOpComp;
	}
	
	public ParserRule getOpCompRule() {
		return getOpCompAccess().getRule();
	}
	
	//Value:
	//	val=INT | STRING | Boolean;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	//Boolean:
	//	bol='yes' | 'no';
	public BooleanElements getBooleanAccess() {
		return pBoolean;
	}
	
	public ParserRule getBooleanRule() {
		return getBooleanAccess().getRule();
	}
	
	//Empty:
	//	empty=' '?;
	public EmptyElements getEmptyAccess() {
		return pEmpty;
	}
	
	public ParserRule getEmptyRule() {
		return getEmptyAccess().getRule();
	}
	
	//Delete:
	//	'delete';
	public DeleteElements getDeleteAccess() {
		return pDelete;
	}
	
	public ParserRule getDeleteRule() {
		return getDeleteAccess().getRule();
	}
	
	//Insert:
	//	'insert';
	public InsertElements getInsertAccess() {
		return pInsert;
	}
	
	public ParserRule getInsertRule() {
		return getInsertAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
