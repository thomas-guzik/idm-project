/*
 * generated by Xtext 2.23.0
 */
grammar InternalQsv;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package idm.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package idm.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import idm.services.QsvGrammarAccess;

}

@parser::members {

 	private QsvGrammarAccess grammarAccess;

    public InternalQsvParser(TokenStream input, QsvGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "QuerySepartedValue";
   	}

   	@Override
   	protected QsvGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleQuerySepartedValue
entryRuleQuerySepartedValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getQuerySepartedValueRule()); }
	iv_ruleQuerySepartedValue=ruleQuerySepartedValue
	{ $current=$iv_ruleQuerySepartedValue.current; }
	EOF;

// Rule QuerySepartedValue
ruleQuerySepartedValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getQuerySepartedValueAccess().getHeaderHeaderParserRuleCall_0_0());
				}
				lv_header_0_0=ruleHeader
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getQuerySepartedValueRule());
					}
					set(
						$current,
						"header",
						lv_header_0_0,
						"idm.Qsv.Header");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getQuerySepartedValueAccess().getStatementsStatementParserRuleCall_1_0());
				}
				lv_statements_1_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getQuerySepartedValueRule());
					}
					add(
						$current,
						"statements",
						lv_statements_1_0,
						"idm.Qsv.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleHeader
entryRuleHeader returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHeaderRule()); }
	iv_ruleHeader=ruleHeader
	{ $current=$iv_ruleHeader.current; }
	EOF;

// Rule Header
ruleHeader returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='using'
		{
			newLeafNode(otherlv_0, grammarAccess.getHeaderAccess().getUsingKeyword_0());
		}
		(
			(
				lv_nameFile_1_0=RULE_STRING
				{
					newLeafNode(lv_nameFile_1_0, grammarAccess.getHeaderAccess().getNameFileSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getHeaderRule());
					}
					setWithLastConsumed(
						$current,
						"nameFile",
						lv_nameFile_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_2='with'
		{
			newLeafNode(otherlv_2, grammarAccess.getHeaderAccess().getWithKeyword_2());
		}
		otherlv_3='column'
		{
			newLeafNode(otherlv_3, grammarAccess.getHeaderAccess().getColumnKeyword_3());
		}
		otherlv_4='names:'
		{
			newLeafNode(otherlv_4, grammarAccess.getHeaderAccess().getNamesKeyword_4());
		}
		(
			(
				(
					lv_hasColumnName_5_0='yes'
					{
						newLeafNode(lv_hasColumnName_5_0, grammarAccess.getHeaderAccess().getHasColumnNameYesKeyword_5_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getHeaderRule());
						}
						setWithLastConsumed($current, "hasColumnName", lv_hasColumnName_5_0 != null, "yes");
					}
				)
			)
			    |
			otherlv_6='no'
			{
				newLeafNode(otherlv_6, grammarAccess.getHeaderAccess().getNoKeyword_5_1());
			}
		)
	)
;

// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_ruleStatement=ruleStatement
	{ $current=$iv_ruleStatement.current; }
	EOF;

// Rule Statement
ruleStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getStatementAccess().getStatementPrintParserRuleCall_0());
			}
			lv_statement_0_0=rulePrint
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getStatementRule());
				}
				set(
					$current,
					"statement",
					lv_statement_0_0,
					"idm.Qsv.Print");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRulePrint
entryRulePrint returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrintRule()); }
	iv_rulePrint=rulePrint
	{ $current=$iv_rulePrint.current; }
	EOF;

// Rule Print
rulePrint returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_print_0_0='print'
			{
				newLeafNode(lv_print_0_0, grammarAccess.getPrintAccess().getPrintPrintKeyword_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getPrintRule());
				}
				setWithLastConsumed($current, "print", lv_print_0_0, "print");
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
